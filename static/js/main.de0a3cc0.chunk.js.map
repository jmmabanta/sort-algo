{"version":3,"sources":["components/data-set/DataSetSize.tsx","components/data-set/DataSetState.tsx","components/data-set/DataSetDisplay.tsx","App.tsx","index.tsx"],"names":["DataSetSize","props","className","name","value","dataSize","size","onChange","handleChange","onClick","incrementSize","generateData","data","i","Math","floor","random","DataSetDisplay","display","dataSet","map","num","App","dataState","initialValue","useState","setSize","setDataSet","delta","e","newSize","target","test","parseInt","newValue","useDataState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA2BeA,EAjBK,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,gDACA,uBACEC,KAAK,WACLC,MAAOH,EAAMI,SAASC,KACtBC,SAAUN,EAAMI,SAASG,eAE3B,sBAAKN,UAAU,yBAAf,UACE,wBAAQO,QAAS,kBAAMR,EAAMI,SAASK,eAAe,IAArD,eACA,wBAAQD,QAAS,kBAAMR,EAAMI,SAASK,cAAc,IAApD,sB,OCRFC,EAAe,SAACL,GAEpB,IADA,IAAIM,EAAiB,CAACN,GACbO,EAAI,EAAGA,EAAIP,EAAMO,IACxBD,EAAKC,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAE9C,OAAOJ,GCGMK,EAhBQ,SAAChB,GACtB,IAAMiB,EACJ,IACAjB,EAAMkB,QAAQC,KAAI,SAACC,GACjB,MAAO,IAAMA,KAEf,KACF,OACE,gCACE,uCACA,6BAAKH,IACL,2CAAcjB,EAAMK,KAApB,2CCMSgB,EAfH,WAEV,IAAMC,EFYoB,SAACC,GAAwC,IAAD,EAC1CC,mBAASD,GADiC,mBAC3DlB,EAD2D,KACrDoB,EADqD,OAEpCD,mBAASd,EAAaL,IAFc,mBAE3Da,EAF2D,KAElDQ,EAFkD,KA+BlE,MAAO,CAAErB,OAAMI,cA1BO,SAACkB,GACrBF,GAAQ,SAACG,GACP,IAAIC,EAAUD,EAOd,OANID,EAAQ,EACVE,GAAWF,EAEXE,EAAUA,GAAmB,EAATF,EAAaE,EAAUF,GAAiB,EAATA,EAErDD,EAAWhB,EAAamB,IACjBA,MAiBmBtB,aAZT,SAACqB,GAEpB,GACqB,KAAnBA,EAAEE,OAAO3B,OAFQ,aAGL4B,KAAKH,EAAEE,OAAO3B,QAAU6B,SAASJ,EAAEE,OAAO3B,QAAU,EAChE,CACA,IAAM8B,EAAWD,SAASJ,EAAEE,OAAO3B,QAAU,EAC7CsB,EAAQQ,GACRP,EAAWhB,EAAauB,MAIgBf,WE3C1BgB,CAAa,GAC/B,OACE,sBAAKjC,UAAU,MAAf,UACE,oDACA,6BACE,4EAEF,cAAC,EAAD,CAAaG,SAAUkB,IACvB,cAAC,EAAD,CAAgBJ,QAASI,EAAUJ,QAASb,KAAMiB,EAAUjB,WCZlE8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.de0a3cc0.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    size: number;\n    incrementSize: (delta: number) => void;\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  };\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div className=\"data-size-form\">\n      <h2>Data Set Size:</h2>\n      <input\n        name=\"dataSize\"\n        value={props.dataSize.size}\n        onChange={props.dataSize.handleChange}\n      ></input>\n      <div className=\"data-size-form-buttons\">\n        <button onClick={() => props.dataSize.incrementSize(-1)}>-</button>\n        <button onClick={() => props.dataSize.incrementSize(1)}>+</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","/* The state manager for the data set size */\n\nimport React, { useState } from 'react';\n\n// Defines types for the hook\ninterface DataSizeType {\n  size: number;\n  incrementSize: (delta: number) => void;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  dataSet: number[];\n}\n\n// Generates random data b/w -100 and 100 inclusive\nconst generateData = (size: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.floor(Math.random() * 201) - 100;\n  }\n  return data;\n};\n\nexport const useDataState = (initialValue: number): DataSizeType => {\n  const [size, setSize] = useState(initialValue);\n  const [dataSet, setDataSet] = useState(generateData(size));\n\n  // Used for buttons\n  const incrementSize = (delta: number) => {\n    setSize((e) => {\n      let newSize = e;\n      if (delta > 0) {\n        newSize += delta;\n      } else {\n        newSize = newSize > delta * -1 ? newSize + delta : delta * -1;\n      }\n      setDataSet(generateData(newSize));\n      return newSize;\n    });\n  };\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const regexCheck = /^[0-9\\b]+$/; // Checks if input is a valid number\n    if (\n      e.target.value === '' ||\n      (regexCheck.test(e.target.value) && parseInt(e.target.value) >= 1)\n    ) {\n      const newValue = parseInt(e.target.value) || 1;\n      setSize(newValue);\n      setDataSet(generateData(newValue));\n    }\n  };\n\n  return { size, incrementSize, handleChange, dataSet };\n};\n","interface DataSetProps {\n  dataSet: number[];\n  size: number;\n}\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  const display =\n    '[' +\n    props.dataSet.map((num) => {\n      return ' ' + num;\n    }) +\n    ' ]';\n  return (\n    <div>\n      <h2>Data:</h2>\n      <h3>{display}</h3>\n      <p>There are {props.size} random elements in the data set.</p>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","import './App.css';\n\nimport DataSetSize from './components/data-set/DataSetSize';\nimport { useDataState } from './components/data-set/DataSetState';\n\nimport DataSetDisplay from './components/data-set/DataSetDisplay';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(6);\n  return (\n    <div className=\"App\">\n      <h1>Sorting Algorithms</h1>\n      <h3>\n        <i>*still a work in progress don't flame :(*</i>\n      </h3>\n      <DataSetSize dataSize={dataState} />\n      <DataSetDisplay dataSet={dataState.dataSet} size={dataState.size} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}