{"version":3,"sources":["components/data-set/DataSetInputs.tsx","components/sort/algorithms/SelectionSort.ts","components/sort/algorithms/InsertionSort.ts","components/sort/SortAnimator.ts","components/DataSetDisplay.tsx","components/data-set/DataSetState.ts","components/sort/SortDataInputs.tsx","App.tsx","index.tsx"],"names":["DataSetSize","props","className","type","min","max","defaultValue","onInput","dataSize","handleChange","onChange","disabled","isSorted","onClick","regenerateNewData","isDisabled","id","undoSort","SelectionSort","dataSet","sortedData","slice","animations","length","i","minIndex","push","j","temp","InsertionSort","key","PRIMARY_COLOR","COMPARISON_COLOR","KEY_COLOR","KEY_COLOR_TWO","baseSpeed","SortAnimator","useState","animating","setAnimating","setIsSorted","useEffect","userInputs","document","getElementById","display","ANIMATION_SPEED","multiplier","sortedAnimation","dataBars","setTimeout","style","backgroundColor","animateSelectionSort","speed","getElementsByClassName","lastKeyIndex","barOneIndex","barTwoIndex","barOneStyles","barTwoStyles","barOneHeight","height","console","log","animateInsertionSort","sortData","algorithm","setBaseSpeed","e","parseFloat","target","value","resetSorted","calculateHeight","Math","DataSetDisplay","width","map","index","margin","generateData","size","data","random","SortDataButtons","step","setSpeed","App","dataState","initialValue","setDataSet","resetStyling","input","newSize","ceil","oldData","setResetSorted","func","useDataState","animState","href","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.26e7fc94.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    regenerateNewData: () => void;\n    undoSort: () => void;\n  };\n  isDisabled: boolean;\n  isSorted: boolean;\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div className=\"input_section\">\n      <h3>Generate Data:</h3>\n      <input\n        type=\"range\"\n        className=\"slider data\"\n        min={100}\n        max={500}\n        defaultValue={100}\n        onInput={props.dataSize.handleChange}\n        onChange={props.dataSize.handleChange}\n        disabled={props.isSorted}\n      />\n      <div className=\"button_list array_button\">\n        <button\n          onClick={props.dataSize.regenerateNewData}\n          disabled={props.isDisabled}\n        >\n          Make New Array\n        </button>\n        <button\n          id=\"undo_sort\"\n          onClick={props.dataSize.undoSort}\n          disabled={!props.isSorted || props.isDisabled}\n        >\n          Undo Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","const SelectionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  // animations: [type: string, indexOne: number, indexTwo: number]\n  // Types:\n  // 'key': Sets the bar that is to be swapped with the minimum to be yellow\n  // 'compare': Compares the minIndex with j\n  // 'swap': Swaps the key with the mininum\n  const animations: (string | number)[][] = [];\n  if (sortedData.length <= 1) return animations;\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    animations.push(['key', i, 0]);\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n      animations.push(['compare', minIndex, j]);\n    }\n    animations.push(['swap', i, minIndex]);\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n  return animations;\n};\n\nexport default SelectionSort;\n","const InsertionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  // animations: [type: string, index: number]\n  // *Only needs one index as it is always being swapped\n  // or compared with the bar next to it\n  //\n  // Types:\n  // 'key': Highlights the bar dividing the 'sorted-not-really'\n  //   part from the unsorted\n  // 'compare': Compares the key with the bar to the left of it\n  // 'swap': Swaps the key with the bar next to it\n  const animations: (string | number)[][] = [];\n  if (sortedData.length <= 1) return animations;\n  for (let i = 1; i < sortedData.length; i++) {\n    let key = sortedData[i];\n    let j = i - 1;\n    if (i < sortedData.length - 1) animations.push(['key', i]);\n    animations.push(['compare', j]);\n    while (j >= 0 && sortedData[j] > key) {\n      animations.push(['swap', j]);\n      sortedData[j + 1] = sortedData[j];\n      sortedData[j] = key;\n      j--;\n      if (sortedData[j] > key) animations.push(['compare', j]);\n    }\n  }\n  return animations;\n};\n\nexport default InsertionSort;\n","import React, { useEffect, useState } from 'react';\n\nimport SelectionSort from './algorithms/SelectionSort';\nimport InsertionSort from './algorithms/InsertionSort';\n\nexport type AlgorithmType = 'selection' | 'insertion' | undefined;\n\n// Main Colors\nexport const PRIMARY_COLOR = 'steelblue';\nconst COMPARISON_COLOR = 'gold';\nconst KEY_COLOR = 'darkorchid';\nconst KEY_COLOR_TWO = 'lightsalmon';\nconst SORTED_COLOR = 'seagreen';\n\nlet baseSpeed = 2;\n\nconst SortAnimator = (dataSet: number[]) => {\n  // States used to disable user input\n  const [animating, setAnimating] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n\n  const resetSorted = () => {\n    setIsSorted(false);\n  };\n\n  //Hides all forms of user interaction with the data set during animation\n  useEffect(() => {\n    const userInputs = document.getElementById('inputs') as HTMLElement;\n    const display = document.getElementById('display') as HTMLElement;\n    if (animating) {\n      userInputs.className = 'hide';\n      display.className = 'unblur';\n    } else {\n      userInputs.className = 'show';\n      display.className = 'blur';\n    }\n  }, [animating]);\n\n  const sortData = (algorithm?: AlgorithmType) => {\n    switch (algorithm) {\n      case 'selection':\n        animateSelectionSort();\n        break;\n      case 'insertion':\n        animateInsertionSort();\n        break;\n      default:\n        setIsSorted(false);\n        console.log('No algorithm specified :/');\n        break;\n    }\n  };\n\n  const setBaseSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    baseSpeed = 1 / parseFloat(e.target.value);\n  };\n\n  // Speed of animation (in ms)\n  // Base speed is the speed in which a dataSet of length 100\n  // goes at, and is then scaled to larger sizes\n  const ANIMATION_SPEED = () => {\n    const multiplier = dataSet.length / 100;\n    return baseSpeed / (multiplier * multiplier);\n  };\n\n  /*\n  SORTING ALGORITHM ANIMATIONS HERE\n\n  =========================================================\n\n  ALL SORTING ALGORITHMS RETURN AN 'ANIMATION' ARRAY:\n  An animation array is a 2D array that contains the steps\n  done in animating the sorting.\n\n  Each element is array that containes the following values:\n    - type: string = The kind of operator it is\n      - For example, in selection sort: type can be 'compare' or 'swap'\n    - indexOne: number = The first bar\n    - indexTwo: number = The second bar\n\n  Sorting then utilizes each element of the animation array to modify the\n  CSS styling of the bars to demonstrate the sorting.\n\n  Note: All animations use a bunch of setTimeouts\n    - Yes, I know it looks horrible, I just don't know any other alternative\n  */\n\n  // The final 'green' swipe of the data bars when things are done sorting\n  const sortedAnimation = (dataBars: HTMLCollectionOf<HTMLElement>) => {\n    for (let i = 0; i < dataBars.length; i++) {\n      setTimeout(() => {\n        dataBars[i].style.backgroundColor = SORTED_COLOR;\n        if (i === dataBars.length - 1) {\n          setTimeout(() => {\n            setAnimating(false);\n            setIsSorted(true);\n          }, 1500);\n        }\n      }, i * (ANIMATION_SPEED() * 5));\n    }\n  };\n\n  const animateSelectionSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n    const speed = ANIMATION_SPEED();\n    const animations = SelectionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    // Key: the element to be swapped with the minimum\n    let lastKeyIndex = 0;\n    dataBars[0].style.backgroundColor = KEY_COLOR_TWO;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[barTwoIndex as number].style;\n      switch (type) {\n        case 'key':\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (lastKeyIndex !== (barOneIndex as number)) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              barOneStyles.backgroundColor = KEY_COLOR_TWO;\n              lastKeyIndex = barOneIndex as number;\n            }\n            // The (i - 0.001) makes sure this executes\n            // before the other timeouts\n            // Yes, it is really jank :/\n          }, (i - 0.001) * speed);\n          break;\n        case 'compare':\n          // Sets to comparison color\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = KEY_COLOR;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * speed);\n          // Resets back to original color\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) {\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n              sortedAnimation(dataBars);\n            }\n          }, i * speed);\n          break;\n        default:\n          // This should in theory never print\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateInsertionSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n    const speed = ANIMATION_SPEED();\n    const animations = InsertionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[(barOneIndex as number) + 1].style;\n      switch (type) {\n        case 'key':\n          setTimeout(() => {\n            dataBars[(barOneIndex as number) - 1].style.backgroundColor =\n              PRIMARY_COLOR;\n            barOneStyles.backgroundColor = KEY_COLOR_TWO;\n          }, i * speed);\n          break;\n        case 'compare':\n          setTimeout(() => {\n            barOneStyles.backgroundColor = COMPARISON_COLOR;\n            if (barTwoStyles.backgroundColor !== KEY_COLOR_TWO)\n              barTwoStyles.backgroundColor = KEY_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR;\n            if (barTwoStyles.backgroundColor !== KEY_COLOR_TWO)\n              barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 2) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) {\n              sortedAnimation(dataBars);\n            }\n          }, i * speed);\n          break;\n        default:\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  return { sortData, setBaseSpeed, animating, isSorted, resetSorted };\n};\n\nexport default SortAnimator;\n","interface DataSetProps {\n  dataSet: number[];\n}\n\nconst MAX_HEIGHT = 93;\n\n// Both calculateHeight and calculateWidth are used for CSS styling\n// Measured in vh and vw\nexport const calculateHeight = (dataSet: number[], value: number) => {\n  return (value * MAX_HEIGHT) / Math.max(...dataSet);\n};\n\nconst calculateWidth = (dataSize: number, maxWidth: number) => {\n  return maxWidth / (1.2 * (dataSize - 1));\n};\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  let width = calculateWidth(props.dataSet.length, 82);\n  return (\n    <div className=\"data_container\">\n      <div className=\"data_set\">\n        {props.dataSet.map((value, index) => {\n          return (\n            <div\n              className=\"data_bar\"\n              key={index}\n              style={{\n                height: `${calculateHeight(props.dataSet, value)}vh`,\n                width: `${width}vw`,\n                margin: `0 ${width / 5}vw`\n              }}\n            ></div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","import React, { useState } from 'react';\nimport { PRIMARY_COLOR } from '../sort/SortAnimator';\nimport { calculateHeight } from '../DataSetDisplay';\n\n// Generates random data\nconst generateData = (size: number, height: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.random() * height + 1;\n  }\n  return data;\n};\n\n// The increment in which the data size grows\nconst INCREMENT = 25;\n\nexport const useDataState = (initialValue: number, height: number) => {\n  const [dataSet, setDataSet] = useState(generateData(initialValue, height));\n\n  let resetSorted: () => void;\n\n  const setResetSorted = (func: () => void) => {\n    resetSorted = func;\n  };\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseFloat(e.target.value);\n    const newSize = Math.ceil(input / INCREMENT) * INCREMENT;\n    console.log(newSize);\n    setDataSet((oldData) => generateData(newSize, height));\n    resetStyling();\n  };\n\n  const regenerateNewData = () => {\n    setDataSet((oldData) => generateData(oldData.length, height));\n    resetStyling();\n  };\n\n  const undoSort = () => {\n    resetStyling();\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < dataBars.length; i++) {\n      dataBars[i].style.height = `${calculateHeight(dataSet, dataSet[i])}vh`;\n    }\n  };\n\n  const resetStyling = () => {\n    resetSorted();\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < dataBars.length; i++)\n      dataBars[i].style.backgroundColor = PRIMARY_COLOR;\n  };\n\n  return { handleChange, regenerateNewData, undoSort, setResetSorted, dataSet };\n};\n","import { AlgorithmType } from './SortAnimator';\n\ninterface ButtonProps {\n  setSpeed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  sortData: (algorithm?: AlgorithmType) => void;\n  isSorted: boolean;\n  isDisabled: boolean;\n}\n\nconst SortDataButtons = (props: ButtonProps) => {\n  return (\n    <div\n      className=\"input_section\"\n      style={{\n        display: props.isSorted ? 'none' : 'inline'\n      }}\n    >\n      <h3>Sort Speed:</h3>\n      <input\n        type=\"range\"\n        className=\"slider sort\"\n        min={0.1}\n        max={1.0}\n        step={0.00001}\n        defaultValue={0.5}\n        onInput={props.setSpeed}\n        onChange={props.setSpeed}\n        disabled={props.isDisabled}\n      ></input>{' '}\n      <div className=\"button_list sort_button\">\n        <button\n          onClick={() => {\n            props.sortData('selection');\n          }}\n          disabled={props.isSorted}\n        >\n          Selection Sort\n        </button>\n        <button\n          onClick={() => {\n            props.sortData('insertion');\n          }}\n          disabled={props.isSorted}\n        >\n          Insertion Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SortDataButtons;\n","import DataSetSize from './components/data-set/DataSetInputs';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/DataSetDisplay';\nimport SortDataButtons from './components/sort/SortDataInputs';\nimport SortAnimator from './components/sort/SortAnimator';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(100, 45);\n  const animState = SortAnimator(dataState.dataSet);\n\n  dataState.setResetSorted(animState.resetSorted);\n\n  return (\n    <div id=\"app\">\n      <div id=\"inputs\" className=\"show\">\n        <h1>Sorting Algorithms</h1>\n        <h2>\n          There are {dataState.dataSet.length} random elements in the data set.\n        </h2>\n        <DataSetSize\n          dataSize={dataState}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n        <SortDataButtons\n          sortData={animState.sortData}\n          setSpeed={animState.setBaseSpeed}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n        <h4>\n          <i>WARNING: Animation contains flashing lights</i>\n        </h4>\n        <h5>\n          © 2021 John Marcus Mabanta ·{' '}\n          <a\n            href=\"https://github.com/jmmabanta/sort-algo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Source Code\n          </a>\n        </h5>\n      </div>\n      <div id=\"display\">\n        <DataSetDisplay dataSet={dataState.dataSet} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}