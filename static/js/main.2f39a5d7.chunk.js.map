{"version":3,"sources":["components/data-set/DataSetInputs.tsx","components/DataSetDisplay.tsx","components/sort/algorithms/SelectionSort.ts","components/sort/algorithms/InsertionSort.ts","components/sort/algorithms/MergeSort.ts","components/sort/SortAnimator.ts","components/data-set/DataSetState.ts","components/sort/SortDataInputs.tsx","App.tsx","index.tsx"],"names":["DataSetSize","props","className","type","min","max","defaultValue","onInput","dataSize","handleChange","onChange","disabled","isSorted","onClick","regenerateNewData","isDisabled","id","undoSort","calculateHeight","dataSet","value","Math","DataSetDisplay","width","length","map","index","style","height","margin","SelectionSort","sortedData","slice","animations","i","minIndex","push","j","temp","InsertionSort","key","mergeSortHelper","arr","low","high","anim","mid","floor","merge","k","PRIMARY_COLOR","COMPARISON_COLOR","KEY_COLOR","KEY_COLOR_TWO","baseSpeed","SortAnimator","useState","animating","setAnimating","setIsSorted","useEffect","userInputs","document","getElementById","display","ANIMATION_SPEED","multiplier","sortedAnimation","dataBars","num","animSpeed","setTimeout","backgroundColor","animateSelectionSort","speed","getElementsByClassName","lastKeyIndex","barOneIndex","barTwoIndex","barOneStyles","barTwoStyles","barOneHeight","console","log","animateInsertionSort","animateMergeSort","array","sortedArray","MergeSort","sortData","algorithm","setBaseSpeed","e","parseFloat","target","resetSorted","generateData","size","data","random","SortDataButtons","step","setSpeed","App","dataState","initialValue","setDataSet","resetStyling","input","newSize","ceil","oldData","setResetSorted","func","useDataState","animState","href","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f39a5d7.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    regenerateNewData: () => void;\n    undoSort: () => void;\n  };\n  isDisabled: boolean;\n  isSorted: boolean;\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div className=\"input_section\">\n      <h3>Generate Data:</h3>\n      <input\n        type=\"range\"\n        className=\"slider data\"\n        min={25}\n        max={500}\n        defaultValue={100}\n        onInput={props.dataSize.handleChange}\n        onChange={props.dataSize.handleChange}\n        disabled={props.isSorted}\n      />\n      <div className=\"button_list array_button\">\n        <button\n          onClick={props.dataSize.regenerateNewData}\n          disabled={props.isDisabled}\n        >\n          Make New Array\n        </button>\n        <button\n          id=\"undo_sort\"\n          onClick={props.dataSize.undoSort}\n          disabled={!props.isSorted || props.isDisabled}\n        >\n          Undo Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","interface DataSetProps {\n  dataSet: number[];\n}\n\nconst MAX_HEIGHT = 92;\n\n// Both calculateHeight and calculateWidth are used for CSS styling\n// Measured in vh and vw\nexport const calculateHeight = (dataSet: number[], value: number) => {\n  return (value * MAX_HEIGHT) / Math.max(...dataSet);\n};\n\nconst calculateWidth = (dataSize: number, maxWidth: number) => {\n  return maxWidth / (1.1 * (dataSize - 1));\n};\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  let width = calculateWidth(props.dataSet.length, 85);\n  return (\n    <div className=\"data_container\">\n      <div className=\"data_set\">\n        {props.dataSet.map((value, index) => {\n          return (\n            <div\n              className=\"data_bar\"\n              key={index}\n              style={{\n                height: `${calculateHeight(props.dataSet, value)}vh`,\n                width: `${width}vw`,\n                margin: `0 ${width / 10}vw`\n              }}\n            ></div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","const SelectionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  // animations: [type: string, indexOne: number, indexTwo: number]\n  // Types:\n  // 'key': Sets the bar that is to be swapped with the minimum to be yellow\n  // 'compare': Compares the minIndex with j\n  // 'swap': Swaps the key with the mininum\n  const animations: (string | number)[][] = [];\n  if (sortedData.length <= 1) return animations;\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    animations.push(['key', i, 0]);\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n      animations.push(['compare', minIndex, j]);\n    }\n    animations.push(['swap', i, minIndex]);\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n  return animations;\n};\n\nexport default SelectionSort;\n","const InsertionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  // animations: [type: string, index: number]\n  // *Only needs one index as it is always being swapped\n  // or compared with the bar next to it\n  //\n  // Types:\n  // 'key': Highlights the bar dividing the 'sorted-not-really'\n  //   part from the unsorted\n  // 'compare': Compares the key with the bar to the left of it\n  // 'swap': Swaps the key with the bar next to it\n  const animations: (string | number)[][] = [];\n  if (sortedData.length <= 1) return animations;\n  for (let i = 1; i < sortedData.length; i++) {\n    let key = sortedData[i];\n    let j = i - 1;\n    if (i < sortedData.length - 1) animations.push(['key', i]);\n    animations.push(['compare', j]);\n    while (j >= 0 && sortedData[j] > key) {\n      animations.push(['swap', j]);\n      sortedData[j + 1] = sortedData[j];\n      sortedData[j] = key;\n      j--;\n      if (sortedData[j] > key) animations.push(['compare', j]);\n    }\n  }\n  return animations;\n};\n\nexport default InsertionSort;\n","// Taken from\n// https://runestone.academy/runestone/books/published/apcsareview/searchsort/mergesort.html\n// * Based on the AP Computer Science A course\n// * Originally in Java, adapted for TypeScript\n// (also basically the same from Clement's visualizer/AlgoExpert.io)\n\nexport const MergeSort = (array: number[]) => {\n  const animations: (string | number)[][] = [];\n  if (array.length <= 1) return animations;\n  const sortedArray = array.slice(); // makes sure og array is not mutated\n  const temp = array.slice();\n  mergeSortHelper(sortedArray, 0, sortedArray.length - 1, temp, animations);\n  return animations;\n};\n\nconst mergeSortHelper = (\n  arr: number[],\n  low: number,\n  high: number,\n  temp: number[],\n  anim: (string | number)[][]\n) => {\n  if (low < high) {\n    const mid = Math.floor((low + high) / 2);\n    mergeSortHelper(temp, low, mid, arr, anim);\n    mergeSortHelper(temp, mid + 1, high, arr, anim);\n    merge(arr, low, mid, high, temp, anim);\n  }\n};\n\nconst merge = (\n  arr: number[],\n  low: number,\n  mid: number,\n  high: number,\n  temp: number[],\n  anim: (string | number)[][]\n) => {\n  let i = low;\n  let j = mid + 1;\n  let k = low;\n\n  while (i <= mid && j <= high) {\n    anim.push(['compare', i, j]);\n    if (temp[i] < temp[j]) {\n      anim.push(['swap', k, temp[i]]);\n      arr[k] = temp[i];\n      i++;\n    } else {\n      anim.push(['swap', k, temp[j]]);\n      arr[k] = temp[j];\n      j++;\n    }\n    k++;\n  }\n\n  while (i <= mid) {\n    anim.push(['swap', k, temp[i]]);\n    arr[k] = temp[i];\n    i++;\n    k++;\n  }\n\n  while (j <= high) {\n    anim.push(['swap', k, temp[j]]);\n    arr[k] = temp[j];\n    j++;\n    k++;\n  }\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { calculateHeight } from '../DataSetDisplay';\n\nimport SelectionSort from './algorithms/SelectionSort';\nimport InsertionSort from './algorithms/InsertionSort';\nimport { MergeSort } from './algorithms/MergeSort';\n\nexport type AlgorithmType = 'selection' | 'insertion' | 'merge' | undefined;\n\n// Main Colors\nexport const PRIMARY_COLOR = 'steelblue';\nconst COMPARISON_COLOR = 'yellow';\nconst KEY_COLOR = 'magenta';\nconst KEY_COLOR_TWO = 'crimson';\nconst SORTED_COLOR = 'seagreen';\n\nlet baseSpeed = 2;\n\nconst clamp = (num: number, min: number, max: number) =>\n  Math.min(Math.max(num, min), max);\n\nconst SortAnimator = (dataSet: number[]) => {\n  // States used to disable user input\n  const [animating, setAnimating] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n\n  const resetSorted = () => {\n    setIsSorted(false);\n  };\n\n  //Hides all forms of user interaction with the data set during animation\n  useEffect(() => {\n    const userInputs = document.getElementById('inputs') as HTMLElement;\n    const display = document.getElementById('display') as HTMLElement;\n    if (animating) {\n      userInputs.className = 'hide';\n      display.className = 'unblur';\n    } else {\n      userInputs.className = 'show';\n      display.className = 'blur';\n    }\n  }, [animating]);\n\n  const sortData = (algorithm?: AlgorithmType) => {\n    switch (algorithm) {\n      case 'selection':\n        animateSelectionSort();\n        break;\n      case 'insertion':\n        animateInsertionSort();\n        break;\n      case 'merge':\n        animateMergeSort();\n        break;\n      default:\n        setIsSorted(false);\n        console.log('No algorithm specified :/');\n        break;\n    }\n  };\n\n  const setBaseSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    baseSpeed = 1 / parseFloat(e.target.value);\n  };\n\n  // Speed of animation (in ms)\n  // Base speed is the speed in which a dataSet of length 100\n  // goes at, and is then scaled to larger sizes\n  const ANIMATION_SPEED = () => {\n    const multiplier = dataSet.length / 100;\n    return baseSpeed / (multiplier * multiplier);\n  };\n\n  /*\n  SORTING ALGORITHM ANIMATIONS HERE\n\n  =========================================================\n\n  ALL SORTING ALGORITHMS RETURN AN 'ANIMATION' ARRAY:\n  An animation array is a 2D array that contains the steps\n  done in animating the sorting.\n\n  Each element is array that containes the following values:\n    - type: string = The kind of operator it is\n      - For example, in selection sort: type can be 'compare' or 'swap'\n    - indexOne: number = The first bar\n    - indexTwo: number = The second bar\n\n  Sorting then utilizes each element of the animation array to modify the\n  CSS styling of the bars to demonstrate the sorting.\n\n  Note: All animations use a bunch of setTimeouts\n    - Yes, I know it looks horrible, I just don't know any other alternative\n  */\n\n  // The final 'green' swipe of the data bars when things are done sorting\n  const sortedAnimation = (dataBars: HTMLCollectionOf<HTMLElement>) => {\n    const animSpeed = clamp(ANIMATION_SPEED(), 1, 50);\n    for (let i = 0; i < dataBars.length; i++) {\n      setTimeout(() => {\n        dataBars[i].style.backgroundColor = SORTED_COLOR;\n        if (i === dataBars.length - 1) {\n          setTimeout(() => {\n            setAnimating(false);\n            setIsSorted(true);\n          }, 1500);\n        }\n      }, i * animSpeed);\n    }\n  };\n\n  const animateSelectionSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n    const speed = ANIMATION_SPEED();\n    const animations = SelectionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    // Key: the element to be swapped with the minimum\n    let lastKeyIndex = 0;\n    dataBars[0].style.backgroundColor = KEY_COLOR_TWO;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[barTwoIndex as number].style;\n      switch (type) {\n        case 'key':\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (lastKeyIndex !== (barOneIndex as number)) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              barOneStyles.backgroundColor = KEY_COLOR_TWO;\n              lastKeyIndex = barOneIndex as number;\n            }\n            // The (i - 0.001) makes sure this executes\n            // before the other timeouts\n            // Yes, it is really jank :/\n          }, (i - 0.001) * speed);\n          break;\n        case 'compare':\n          // Sets to comparison color\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = KEY_COLOR;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * speed);\n          // Resets back to original color\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) {\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n              sortedAnimation(dataBars);\n            }\n          }, i * speed);\n          break;\n        default:\n          // This should in theory never print\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateInsertionSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n    const speed = ANIMATION_SPEED();\n    const animations = InsertionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[(barOneIndex as number) + 1].style;\n      switch (type) {\n        case 'key':\n          setTimeout(() => {\n            dataBars[(barOneIndex as number) - 1].style.backgroundColor =\n              PRIMARY_COLOR;\n            barOneStyles.backgroundColor = KEY_COLOR_TWO;\n          }, i * speed);\n          break;\n        case 'compare':\n          setTimeout(() => {\n            barOneStyles.backgroundColor = COMPARISON_COLOR;\n            if (barTwoStyles.backgroundColor !== KEY_COLOR_TWO)\n              barTwoStyles.backgroundColor = KEY_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR;\n            if (barTwoStyles.backgroundColor !== KEY_COLOR_TWO)\n              barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 2) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) sortedAnimation(dataBars);\n          }, i * speed);\n          break;\n        default:\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateMergeSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n    const speed = ANIMATION_SPEED() * (dataSet.length / 50);\n    const animations = MergeSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      switch (type) {\n        case 'compare':\n          const barTwoStyles = dataBars[barTwoIndex as number].style;\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR_TWO;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1.5) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR;\n            barOneStyles.height = `${calculateHeight(\n              dataSet,\n              barTwoIndex as number\n            )}vh`;\n            if (i === animations.length - 1) sortedAnimation(dataBars);\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1.5) * speed);\n          break;\n        default:\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  return { sortData, setBaseSpeed, animating, isSorted, resetSorted };\n};\n\nexport default SortAnimator;\n","import React, { useState } from 'react';\nimport { PRIMARY_COLOR } from '../sort/SortAnimator';\nimport { calculateHeight } from '../DataSetDisplay';\n\n// Generates random data\nconst generateData = (size: number, height: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.random() * height + 1;\n  }\n  return data;\n};\n\n// The increment in which the data size grows\nconst INCREMENT = 25;\n\nexport const useDataState = (initialValue: number, height: number) => {\n  const [dataSet, setDataSet] = useState(generateData(initialValue, height));\n\n  let resetSorted: () => void;\n\n  const setResetSorted = (func: () => void) => {\n    resetSorted = func;\n  };\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseFloat(e.target.value);\n    const newSize = Math.ceil(input / INCREMENT) * INCREMENT;\n    setDataSet((oldData) => generateData(newSize, height));\n    resetStyling();\n  };\n\n  const regenerateNewData = () => {\n    setDataSet((oldData) => generateData(oldData.length, height));\n    resetStyling();\n  };\n\n  const undoSort = () => {\n    resetStyling();\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < dataBars.length; i++) {\n      dataBars[i].style.height = `${calculateHeight(dataSet, dataSet[i])}vh`;\n    }\n  };\n\n  const resetStyling = () => {\n    resetSorted();\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < dataBars.length; i++)\n      dataBars[i].style.backgroundColor = PRIMARY_COLOR;\n  };\n\n  return { handleChange, regenerateNewData, undoSort, setResetSorted, dataSet };\n};\n","import { AlgorithmType } from './SortAnimator';\n\ninterface ButtonProps {\n  setSpeed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  sortData: (algorithm?: AlgorithmType) => void;\n  isSorted: boolean;\n  isDisabled: boolean;\n}\n\nconst SortDataButtons = (props: ButtonProps) => {\n  return (\n    <div\n      className=\"input_section sort_section\"\n      style={{\n        display: props.isSorted ? 'none' : 'inline'\n      }}\n    >\n      <h3>Sort Speed:</h3>\n      <input\n        type=\"range\"\n        className=\"slider sort\"\n        min={0.1}\n        max={1.0}\n        step={0.00001}\n        defaultValue={0.5}\n        onInput={props.setSpeed}\n        onChange={props.setSpeed}\n        disabled={props.isDisabled}\n      ></input>{' '}\n      <div className=\"button_list sort_button\">\n        <button\n          onClick={() => {\n            props.sortData('selection');\n          }}\n          disabled={props.isSorted}\n        >\n          Selection Sort\n        </button>\n        <button\n          onClick={() => {\n            props.sortData('insertion');\n          }}\n          disabled={props.isSorted}\n        >\n          Insertion Sort\n        </button>\n        <button\n          onClick={() => {\n            props.sortData('merge');\n          }}\n          disabled={props.isSorted}\n        >\n          Merge Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SortDataButtons;\n","import DataSetSize from './components/data-set/DataSetInputs';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/DataSetDisplay';\nimport SortDataButtons from './components/sort/SortDataInputs';\nimport SortAnimator from './components/sort/SortAnimator';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(100, 45);\n  const animState = SortAnimator(dataState.dataSet);\n\n  dataState.setResetSorted(animState.resetSorted);\n\n  return (\n    <div id=\"app\">\n      <div id=\"inputs\" className=\"show\">\n        <h1>Sorting Algorithms</h1>\n        <h2>\n          There are {dataState.dataSet.length} random elements in the data set.\n        </h2>\n        <hr />\n        <DataSetSize\n          dataSize={dataState}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n        <SortDataButtons\n          sortData={animState.sortData}\n          setSpeed={animState.setBaseSpeed}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n        <h4>\n          <i>WARNING: Animation contains flashing lights</i>\n        </h4>\n        <h5>\n          © 2021 John Marcus Mabanta ·{' '}\n          <a\n            href=\"https://github.com/jmmabanta/sort-algo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Source Code\n          </a>\n        </h5>\n      </div>\n      <div id=\"display\">\n        <DataSetDisplay dataSet={dataState.dataSet} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}