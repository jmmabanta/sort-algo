{"version":3,"sources":["components/data-set/DataSetSize.tsx","components/sort/algorithms/SelectionSort.ts","components/sort/algorithms/InsertionSort.ts","components/sort/SortAnimator.ts","components/DataSetDisplay.tsx","components/data-set/DataSetState.ts","components/sort/SortDataButtons.tsx","App.tsx","index.tsx"],"names":["DataSetSize","props","id","type","name","min","max","step","defaultValue","onInput","dataSize","handleChange","onChange","onClick","regenerateNewData","style","visibility","undoSort","setSpeed","SelectionSort","dataSet","sortedData","slice","animations","length","i","minIndex","push","j","temp","InsertionSort","key","PRIMARY_COLOR","COMPARISON_COLOR","KEY_COLOR","KEY_COLOR_TWO","baseSpeed","SortAnimator","useState","animating","setAnimating","useEffect","userInputs","document","getElementById","ANIMATION_SPEED","multiplier","sortedAnimation","dataBars","setTimeout","backgroundColor","setIsSorted","animateSelectionSort","getElementsByClassName","lastKeyIndex","barOneIndex","barTwoIndex","barOneStyles","barTwoStyles","barOneHeight","height","console","log","animateInsertionSort","sortData","algorithm","setBaseSpeed","e","parseFloat","target","value","calculateHeight","Math","DataSetDisplay","width","className","map","index","margin","generateData","size","data","random","isSorted","SortDataButtons","App","dataState","initialValue","setDataSet","resetStyling","sortButtons","undoSortButton","newSize","parseInt","oldData","useDataState","animState","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.002a3092.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    regenerateNewData: () => void;\n    undoSort: () => void;\n  };\n  setSpeed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div id=\"data_form\">\n      <div id=\"set_size\">\n        <b>Generate Data: </b>\n        <input\n          type=\"range\"\n          name=\"data_size\"\n          min={100}\n          max={500}\n          step={10}\n          defaultValue={100}\n          onInput={props.dataSize.handleChange}\n          onChange={props.dataSize.handleChange}\n        />\n        <button onClick={props.dataSize.regenerateNewData}>\n          Make New Array\n        </button>\n        <button\n          id=\"undo_sort\"\n          style={{ visibility: 'hidden' }}\n          onClick={props.dataSize.undoSort}\n        >\n          Undo Sort\n        </button>\n      </div>\n      <div id=\"set_speed\">\n        <b>Sort Speed: </b>\n        <input\n          type=\"range\"\n          min={0.2}\n          max={2.0}\n          step={0.1}\n          defaultValue={1}\n          onInput={props.setSpeed}\n          onChange={props.setSpeed}\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","const SelectionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  // animations: [type: string, indexOne: number, indexTwo: number]\n  // Types:\n  // 'key': Sets the bar that is to be swapped with the minimum to be yellow\n  // 'compare': Compares the minIndex with j\n  // 'swap': Swaps the key with the mininum\n  const animations: (string | number)[][] = [];\n  if (sortedData.length <= 1) return animations;\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    animations.push(['key', i, 0]);\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n      animations.push(['compare', minIndex, j]);\n    }\n    animations.push(['swap', i, minIndex]);\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n  return animations;\n};\n\nexport default SelectionSort;\n","const InsertionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  // animations: [type: string, index: number]\n  // *Only needs one index as it is always being swapped\n  // or compared with the bar next to it\n  //\n  // Types:\n  // 'compare': Compares the key with the bar to the left of it\n  // 'swap': Swaps the key with the bar next to it\n  const animations: (string | number)[][] = [];\n  if (sortedData.length <= 1) return animations;\n  for (let i = 1; i < sortedData.length; i++) {\n    let key = sortedData[i];\n    let j = i - 1;\n    animations.push(['compare', j]);\n    while (j >= 0 && sortedData[j] > key) {\n      animations.push(['swap', j]);\n      sortedData[j + 1] = sortedData[j];\n      sortedData[j] = key;\n      j--;\n      if (sortedData[j] > key) animations.push(['compare', j]);\n    }\n  }\n  return animations;\n};\n\nexport default InsertionSort;\n","import React, { useState, useEffect } from 'react';\nimport { setIsSorted } from '../data-set/DataSetState';\n\nimport SelectionSort from './algorithms/SelectionSort';\nimport InsertionSort from './algorithms/InsertionSort';\n\nexport type AlgorithmType = 'selection' | 'insertion' | undefined;\n\n// Main Colors\nexport const PRIMARY_COLOR = 'cornflowerblue';\nconst COMPARISON_COLOR = 'orangered';\nconst KEY_COLOR = 'magenta';\nconst KEY_COLOR_TWO = 'yellow';\nconst SORTED_COLOR = 'palegreen';\n\nlet baseSpeed = 1;\n\nconst SortAnimator = (dataSet: number[]) => {\n  /*\n  State essentially toggles visibility of slider\n  A band-aid fix that stops user from changing data set\n  While its being sorted\n  */\n  const [animating, setAnimating] = useState(false);\n\n  /*\n  Hides all forms of user interaction with the data set during animation:\n    - Slider that controls size\n    - Buttons that sort the set\n  Currently unused, implement later when selection sort animation works.\n  */\n  useEffect(() => {\n    const userInputs = document.getElementById('data_form') as HTMLElement;\n    if (animating) {\n      userInputs.style.visibility = 'hidden';\n    } else {\n      userInputs.style.visibility = 'visible';\n    }\n  }, [animating]);\n\n  const sortData = (algorithm?: AlgorithmType) => {\n    const sortButtons = document.getElementById('sort_buttons') as HTMLElement;\n    sortButtons.style.visibility = 'hidden';\n    switch (algorithm) {\n      case 'selection':\n        animateSelectionSort();\n        break;\n      case 'insertion':\n        animateInsertionSort();\n        break;\n      default:\n        setIsSorted(false);\n        console.log('No algorithm specified :/');\n        break;\n    }\n  };\n\n  const setBaseSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    baseSpeed = 1 / parseFloat(e.target.value);\n  };\n\n  // Speed of animation (in ms)\n  // Base speed is the speed in which a dataSet of length 100\n  // goes at, and is then scaled to larger sizes\n  const ANIMATION_SPEED = () => {\n    const multiplier = dataSet.length / 100;\n    return baseSpeed / (multiplier * multiplier);\n  };\n\n  /*\n  SORTING ALGORITHM ANIMATIONS HERE\n\n  =========================================================\n\n  ALL SORTING ALGORITHMS RETURN AN 'ANIMATION' ARRAY:\n  An animation array is a 2D array that contains the steps\n  done in animating the sorting.\n\n  Each element is array that containes the following values:\n    - type: string = The kind of operator it is\n      - For example, in selection sort: type can be 'compare' or 'swap'\n    - indexOne: number = The first bar\n    - indexTwo: number = The second bar\n\n  Sorting then utilizes each element of the animation array to modify the\n  CSS styling of the bars to demonstrate the sorting.\n\n  Note: All animations use a bunch of setTimeouts\n    - Yes, I know it looks horrible, I just don't know any other alternative\n  */\n\n  // The final 'green' swipe of the data bars when things are done sorting\n  const sortedAnimation = (dataBars: HTMLCollectionOf<HTMLElement>) => {\n    for (let i = 0; i < dataBars.length; i++) {\n      setTimeout(() => {\n        dataBars[i].style.backgroundColor = SORTED_COLOR;\n        if (i === dataBars.length - 1) {\n          setAnimating(false);\n          setIsSorted(true);\n        }\n      }, i * (ANIMATION_SPEED() * 5));\n    }\n  };\n\n  const animateSelectionSort = () => {\n    setAnimating(true);\n    const animations = SelectionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    // Key: the element to be swapped with the minimum\n    let lastKeyIndex = 0;\n    dataBars[0].style.backgroundColor = KEY_COLOR_TWO;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[barTwoIndex as number].style;\n      switch (type) {\n        case 'key':\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (lastKeyIndex !== (barOneIndex as number)) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              barOneStyles.backgroundColor = KEY_COLOR_TWO;\n              lastKeyIndex = barOneIndex as number;\n            }\n            // The (i - 0.001) makes sure this executes\n            // before the other timeouts\n            // Yes, it is really jank :/\n          }, (i - 0.001) * ANIMATION_SPEED());\n          break;\n        case 'compare':\n          // Sets to comparison color\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = KEY_COLOR;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * ANIMATION_SPEED());\n          // Resets back to original color\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * ANIMATION_SPEED());\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) {\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n              sortedAnimation(dataBars);\n            }\n          }, i * ANIMATION_SPEED());\n          break;\n        default:\n          // This should in theory never print\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateInsertionSort = () => {\n    setAnimating(true);\n    const animations = InsertionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[(barOneIndex as number) + 1].style;\n      switch (type) {\n        case 'compare':\n          setTimeout(() => {\n            barOneStyles.backgroundColor = COMPARISON_COLOR;\n            barTwoStyles.backgroundColor = KEY_COLOR;\n          }, i * ANIMATION_SPEED());\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * ANIMATION_SPEED());\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 2) * ANIMATION_SPEED());\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) {\n              sortedAnimation(dataBars);\n            }\n          }, i * ANIMATION_SPEED());\n          break;\n        default:\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  return { sortData, setBaseSpeed };\n};\n\nexport default SortAnimator;\n","interface DataSetProps {\n  dataSet: number[];\n}\n\nconst MAX_HEIGHT = 45;\n\n// Both calculateHeight and calculateWidth are used for CSS styling\n// Measured in vh and vw\nexport const calculateHeight = (dataSet: number[], value: number) => {\n  return (value * MAX_HEIGHT) / Math.max(...dataSet);\n};\n\nconst calculateWidth = (dataSize: number, maxWidth: number) => {\n  return maxWidth / (2 * (dataSize - 1));\n};\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  let width = calculateWidth(props.dataSet.length, 60);\n  return (\n    <div className=\"data_container\">\n      <div className=\"data_set\">\n        {props.dataSet.map((value, index) => {\n          return (\n            <div\n              className=\"data_bar\"\n              key={index}\n              style={{\n                height: `${calculateHeight(props.dataSet, value)}vh`,\n                width: `${width}vw`,\n                margin: `0 ${width}vw`\n              }}\n            ></div>\n          );\n        })}\n      </div>\n      <p>There are {props.dataSet.length} random elements in the data set.</p>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","import React, { useState } from 'react';\nimport { PRIMARY_COLOR } from '../sort/SortAnimator';\nimport { calculateHeight } from '../DataSetDisplay';\n\n// Generates random data\nconst generateData = (size: number, height: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.random() * height + 1;\n  }\n  return data;\n};\n\nlet isSorted = false;\n\nexport const setIsSorted = (value: boolean) => {\n  isSorted = value;\n  if (isSorted) {\n    const undoSortButton = document.getElementById('undo_sort') as HTMLElement;\n    undoSortButton.style.visibility = 'visible';\n  }\n};\n\nexport const getIsSorted = () => isSorted;\n\nexport const useDataState = (initialValue: number, height: number) => {\n  const [dataSet, setDataSet] = useState(generateData(initialValue, height));\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newSize = parseInt(e.target.value);\n    setDataSet((oldData) => generateData(newSize, height));\n    resetStyling();\n  };\n\n  const regenerateNewData = () => {\n    setDataSet((oldData) => generateData(oldData.length, height));\n    resetStyling();\n  };\n\n  const undoSort = () => {\n    resetStyling();\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < dataBars.length; i++) {\n      dataBars[i].style.height = `${calculateHeight(dataSet, dataSet[i])}vh`;\n    }\n  };\n\n  const resetStyling = () => {\n    if (!isSorted) return;\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    const sortButtons = document.getElementById('sort_buttons') as HTMLElement;\n    const undoSortButton = document.getElementById('undo_sort') as HTMLElement;\n    for (let i = 0; i < dataBars.length; i++)\n      dataBars[i].style.backgroundColor = PRIMARY_COLOR;\n    sortButtons.style.visibility = 'visible';\n    undoSortButton.style.visibility = 'hidden';\n    isSorted = false;\n  };\n\n  return { handleChange, regenerateNewData, undoSort, dataSet };\n};\n","import { AlgorithmType } from './SortAnimator';\n\ninterface ButtonProps {\n  sortData: (algorithm?: AlgorithmType) => void;\n}\n\nconst SortDataButtons = (props: ButtonProps) => {\n  return (\n    <div id=\"sort_buttons\">\n      <button\n        onClick={() => {\n          props.sortData('selection');\n        }}\n      >\n        Selection Sort Test\n      </button>\n      <button\n        onClick={() => {\n          props.sortData('insertion');\n        }}\n      >\n        Insertion Sort Test\n      </button>\n    </div>\n  );\n};\n\nexport default SortDataButtons;\n","import DataSetSize from './components/data-set/DataSetSize';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/DataSetDisplay';\nimport SortDataButtons from './components/sort/SortDataButtons';\nimport SortAnimator from './components/sort/SortAnimator';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(100, 45);\n\n  const animState = SortAnimator(dataState.dataSet);\n\n  return (\n    <div className=\"App\">\n      <h1>Sorting Algorithms</h1>\n      <h3>\n        <i>*still a work in progress don't flame :(*</i>\n      </h3>\n      <DataSetDisplay dataSet={dataState.dataSet} />\n      <DataSetSize dataSize={dataState} setSpeed={animState.setBaseSpeed} />\n      <SortDataButtons sortData={animState.sortData} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}