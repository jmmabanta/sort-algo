{"version":3,"sources":["components/data-set/DataSetSize.tsx","components/data-set/DataSetState.tsx","components/data-set/DataSetDisplay.tsx","components/sort/algorithms/SelectionSort.tsx","components/sort/SortData.tsx","App.tsx","index.tsx"],"names":["DataSetSize","props","className","name","value","dataSize","size","onChange","handleChange","onClick","incrementSize","generateData","data","i","Math","floor","random","DataSetDisplay","display","dataSet","map","num","selectionSort","sortedData","slice","length","minIndex","j","temp","SortData","sortData","App","dataState","initialValue","useState","setSize","setDataSet","delta","e","newSize","target","test","parseInt","newValue","sortAlgo","useDataState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA2BeA,EAjBK,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,gDACA,uBACEC,KAAK,WACLC,MAAOH,EAAMI,SAASC,KACtBC,SAAUN,EAAMI,SAASG,eAE3B,sBAAKN,UAAU,yBAAf,UACE,wBAAQO,QAAS,kBAAMR,EAAMI,SAASK,eAAe,IAArD,eACA,wBAAQD,QAAS,kBAAMR,EAAMI,SAASK,cAAc,IAApD,sB,OCLFC,EAAe,SAACL,GAEpB,IADA,IAAIM,EAAiB,CAACN,GACbO,EAAI,EAAGA,EAAIP,EAAMO,IACxBD,EAAKC,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAE9C,OAAOJ,GCAMK,EAhBQ,SAAChB,GACtB,IAAMiB,EACJ,IACAjB,EAAMkB,QAAQC,KAAI,SAACC,GACjB,MAAO,IAAMA,KAEf,KACF,OACE,gCACE,uCACA,6BAAKH,IACL,2CAAcjB,EAAMK,KAApB,2CCCSgB,EAjBO,SAACH,GACrB,IAAII,EAAaJ,EAAQK,QACzB,GAA0B,IAAtBD,EAAWE,OAAc,OAAOF,EAEpC,IAAK,IAAIV,EAAI,EAAGA,EAAIU,EAAWE,OAAS,EAAGZ,IAAK,CAE9C,IADA,IAAIa,EAAWb,EACNc,EAAId,EAAI,EAAGc,EAAIJ,EAAWE,OAAQE,IACrCJ,EAAWI,GAAKJ,EAAWG,KAAWA,EAAWC,GAEvD,IAAIC,EAAOL,EAAWV,GACtBU,EAAWV,GAAKU,EAAWG,GAC3BH,EAAWG,GAAYE,EAGzB,OAAOL,GCAMM,EARE,SAAC5B,GAChB,OACE,8BACE,wBAAQQ,QAAS,kBAAMR,EAAM6B,SAASR,IAAtC,oCCeSS,EAjBH,WAEV,IAAMC,EJeoB,SAACC,GAAwC,IAAD,EAC1CC,mBAASD,GADiC,mBAC3D3B,EAD2D,KACrD6B,EADqD,OAEpCD,mBAASvB,EAAaL,IAFc,mBAE3Da,EAF2D,KAElDiB,EAFkD,KAmClE,MAAO,CAAE9B,OAAMI,cA9BO,SAAC2B,GACrBF,GAAQ,SAACG,GACP,IAAIC,EAAUD,EAOd,OANID,EAAQ,EACVE,GAAWF,EAEXE,EAAUA,GAAmB,EAATF,EAAaE,EAAUF,GAAiB,EAATA,EAErDD,EAAWzB,EAAa4B,IACjBA,MAqBmB/B,aAhBT,SAAC8B,GAEpB,GACqB,KAAnBA,EAAEE,OAAOpC,OAFQ,aAGLqC,KAAKH,EAAEE,OAAOpC,QAAUsC,SAASJ,EAAEE,OAAOpC,QAAU,EAChE,CACA,IAAMuC,EAAWD,SAASJ,EAAEE,OAAOpC,QAAU,EAC7C+B,EAAQQ,GACRP,EAAWzB,EAAagC,MAQgBxB,UAASW,SAJpC,SAACc,GAChBR,GAAW,SAACE,GAAD,OAAOM,EAASN,QI/CXO,CAAa,GAE/B,OACE,sBAAK3C,UAAU,MAAf,UACE,oDACA,6BACE,4EAEF,cAAC,EAAD,CAAaG,SAAU2B,IACvB,cAAC,EAAD,CAAgBb,QAASa,EAAUb,QAASb,KAAM0B,EAAU1B,OAC5D,cAAC,EAAD,CAAUwB,SAAUE,EAAUF,eCdpCgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.bddf8b8a.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    size: number;\n    incrementSize: (delta: number) => void;\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  };\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div className=\"data-size-form\">\n      <h2>Data Set Size:</h2>\n      <input\n        name=\"dataSize\"\n        value={props.dataSize.size}\n        onChange={props.dataSize.handleChange}\n      ></input>\n      <div className=\"data-size-form-buttons\">\n        <button onClick={() => props.dataSize.incrementSize(-1)}>-</button>\n        <button onClick={() => props.dataSize.incrementSize(1)}>+</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","/* The state manager for the data set size */\n\nimport React, { useState } from 'react';\n\n// Defines types for the hook\ninterface DataSizeType {\n  size: number;\n  incrementSize: (delta: number) => void;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  dataSet: number[];\n  sortData: (sortAlgo: SortingAlgorithm) => void;\n}\n\nexport type SortingAlgorithm = (dataSet: number[]) => number[];\n\n// Generates random data b/w -100 and 100 inclusive\nconst generateData = (size: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.floor(Math.random() * 201) - 100;\n  }\n  return data;\n};\n\nexport const useDataState = (initialValue: number): DataSizeType => {\n  const [size, setSize] = useState(initialValue);\n  const [dataSet, setDataSet] = useState(generateData(size));\n\n  // Used for buttons\n  const incrementSize = (delta: number) => {\n    setSize((e) => {\n      let newSize = e;\n      if (delta > 0) {\n        newSize += delta;\n      } else {\n        newSize = newSize > delta * -1 ? newSize + delta : delta * -1;\n      }\n      setDataSet(generateData(newSize));\n      return newSize;\n    });\n  };\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const regexCheck = /^[0-9\\b]+$/; // Checks if input is a valid number\n    if (\n      e.target.value === '' ||\n      (regexCheck.test(e.target.value) && parseInt(e.target.value) >= 1)\n    ) {\n      const newValue = parseInt(e.target.value) || 1;\n      setSize(newValue);\n      setDataSet(generateData(newValue));\n    }\n  };\n\n  const sortData = (sortAlgo: SortingAlgorithm) => {\n    setDataSet((e) => sortAlgo(e));\n  };\n\n  return { size, incrementSize, handleChange, dataSet, sortData };\n};\n","interface DataSetProps {\n  dataSet: number[];\n  size: number;\n}\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  const display =\n    '[' +\n    props.dataSet.map((num) => {\n      return ' ' + num;\n    }) +\n    ' ]';\n  return (\n    <div>\n      <h2>Data:</h2>\n      <h3>{display}</h3>\n      <p>There are {props.size} random elements in the data set.</p>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","const selectionSort = (dataSet: number[]): number[] => {\n  let sortedData = dataSet.slice();\n  if (sortedData.length === 1) return sortedData;\n  // console.log('UNSORTED = ' + sortedData);\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n    }\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n  // console.log('SORTED = ' + sortedData);\n  return sortedData;\n};\n\nexport default selectionSort;\n","import selectionSort from './algorithms/SelectionSort';\n\ninterface SortProps {\n  sortData: (sortAlgo: (dataSet: number[]) => number[]) => void;\n}\n\nconst SortData = (props: SortProps) => {\n  return (\n    <div>\n      <button onClick={() => props.sortData(selectionSort)}>Selection Sort Test</button>\n    </div>\n  );\n};\n\nexport default SortData;\n","import './App.css';\n\nimport DataSetSize from './components/data-set/DataSetSize';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/data-set/DataSetDisplay';\nimport SortData from './components/sort/SortData';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(6);\n\n  return (\n    <div className=\"App\">\n      <h1>Sorting Algorithms</h1>\n      <h3>\n        <i>*still a work in progress don't flame :(*</i>\n      </h3>\n      <DataSetSize dataSize={dataState} />\n      <DataSetDisplay dataSet={dataState.dataSet} size={dataState.size} />\n      <SortData sortData={dataState.sortData} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}