{"version":3,"sources":["components/data-set/DataSetInputs.tsx","components/DataSetDisplay.tsx","components/sort/algorithms/BubbleSort.ts","components/sort/algorithms/SelectionSort.ts","components/sort/algorithms/InsertionSort.ts","components/sort/algorithms/MergeSort.ts","components/sort/algorithms/QuickSort.ts","components/sort/SortAnimator.ts","components/data-set/DataSetState.ts","components/sort/SortDataInputs.tsx","App.tsx","index.tsx"],"names":["DataSetInputs","props","className","style","display","isDisabled","type","min","max","defaultValue","onInput","dataSize","handleChange","onChange","disabled","onClick","regenerateNewData","id","undoSort","isSorted","calculateHeight","dataSet","value","Math","DataSetDisplay","width","length","map","index","height","margin","BubbleSort","animations","sortedData","slice","i","didSwap","j","push","temp","SelectionSort","minIndex","InsertionSort","key","mergeSortHelper","arr","low","high","anim","mid","floor","merge","k","MergeSort","array","sortedArray","swapValues","getRandomPivotIndex","random","lomutoHelper","partitionIndex","lomutoPartition","randIndex","pivot","hoareHelper","hoarePartition","left","right","QuickSort","isLomuto","PRIMARY_COLOR","baseSpeed","SortAnimator","useState","animating","setAnimating","setIsSorted","ANIMATION_SPEED","multiplier","finishSorting","dataBars","num","animSpeed","setTimeout","backgroundColor","animateSort","slowFactor","speed","document","getElementsByClassName","lastKeyIndex","barOneIndex","barTwoIndex","barOneStyles","hasValidBarTwo","Number","isInteger","barTwoStyles","barOneHeight","newHeight","console","error","sortData","algorithm","setBaseSpeed","e","parseFloat","target","resetSorted","generateData","size","data","SortDataInputs","selectedAlgo","setSelectedAlgo","step","setSpeed","name","label","App","dataState","initialValue","setDataSet","resetStyling","input","newSize","ceil","oldData","setResetSorted","func","useDataState","animState","zIndex","href","rel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2237dc13.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    regenerateNewData: () => void;\n    undoSort: () => void;\n  };\n  isDisabled: boolean;\n  isSorted: boolean;\n}\n\nconst DataSetInputs = (props: DataProps) => {\n  return (\n    <div\n      className=\"input_section\"\n      style={{ display: props.isDisabled ? 'none' : 'inline' }}\n    >\n      <h3>Generate Data:</h3>\n      <input\n        type=\"range\"\n        className=\"slider data\"\n        min={25}\n        max={500}\n        defaultValue={100}\n        onInput={props.dataSize.handleChange}\n        onChange={props.dataSize.handleChange}\n        disabled={props.isDisabled}\n      />\n      <div className=\"button_list array_button\">\n        <button\n          onClick={props.dataSize.regenerateNewData}\n          disabled={props.isDisabled}\n        >\n          Make New Array\n        </button>\n        <button\n          id=\"undo_sort\"\n          onClick={props.dataSize.undoSort}\n          disabled={!props.isSorted || props.isDisabled}\n          style={{\n            display:\n              !props.isSorted || props.isDisabled ? 'none' : 'inline-block'\n          }}\n        >\n          Undo Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetInputs;\n","interface DataSetProps {\n  dataSet: number[];\n}\n\nconst MAX_HEIGHT = 75;\n\n// Both calculateHeight and calculateWidth are used for CSS styling\n// Measured in vh and vw\nexport const calculateHeight = (dataSet: number[], value: number) => {\n  return (value * MAX_HEIGHT) / Math.max(...dataSet);\n};\n\nconst calculateWidth = (dataSize: number, maxWidth: number) => {\n  return maxWidth / (1.1 * (dataSize - 1));\n};\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  let width = calculateWidth(props.dataSet.length, 85);\n  return (\n    <div className=\"data_container\">\n      <div className=\"data_set\">\n        {props.dataSet.map((value, index) => {\n          return (\n            <div\n              className=\"data_bar\"\n              key={index}\n              style={{\n                height: `${calculateHeight(props.dataSet, value)}vh`,\n                width: `${width}vw`,\n                margin: `0 ${width / 10}vw`\n              }}\n            ></div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","const BubbleSort = (dataSet: number[]) => {\n  const animations: (string | number)[][] = [];\n\n  if (dataSet.length <= 1) return animations;\n\n  const sortedData = dataSet.slice();\n  const dataSize = sortedData.length;\n\n  for (let i = 0; i < dataSize - 1; i++) {\n    let didSwap = false;\n\n    for (let j = 0; j < dataSize - i - 1; j++) {\n      animations.push(['compare', j, j + 1]);\n\n      if (sortedData[j] > sortedData[j + 1]) {\n        animations.push(['swap', j, j + 1]);\n\n        const temp = sortedData[j];\n        sortedData[j] = sortedData[j + 1];\n        sortedData[j + 1] = temp;\n\n        didSwap = true;\n      }\n    }\n\n    animations.push(['key', dataSize - i - 1]);\n\n    if (!didSwap) return animations;\n  }\n\n  return animations;\n};\n\nexport default BubbleSort;\n","const SelectionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  const animations: (string | number)[][] = [];\n\n  if (sortedData.length <= 1) return animations;\n\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    animations.push(['key', i]);\n\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n      animations.push(['compare', minIndex, j]);\n    }\n\n    animations.push(['swap', i, minIndex]);\n\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n\n  return animations;\n};\n\nexport default SelectionSort;\n","const InsertionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  const animations: (string | number)[][] = [];\n\n  if (sortedData.length <= 1) return animations;\n\n  for (let i = 1; i < sortedData.length; i++) {\n    let key = sortedData[i];\n    let j = i - 1;\n\n    if (i < sortedData.length - 1) animations.push(['key', i]);\n    animations.push(['compare', j, j + 1]);\n\n    while (j >= 0 && sortedData[j] > key) {\n      animations.push(['swap', j, j + 1]);\n      sortedData[j + 1] = sortedData[j];\n      sortedData[j] = key;\n      j--;\n      if (sortedData[j] > key) animations.push(['compare', j, j + 1]);\n    }\n  }\n\n  return animations;\n};\n\nexport default InsertionSort;\n","// Taken from\n// https://runestone.academy/runestone/books/published/apcsareview/searchsort/mergesort.html\n// * Based on the AP Computer Science A course\n// * Originally in Java, adapted for TypeScript\n// (also basically the same from Clement's visualizer/AlgoExpert.io)\n\nconst MergeSort = (array: number[]) => {\n  const animations: (string | number)[][] = [];\n\n  if (array.length <= 1) return animations;\n\n  const sortedArray = array.slice();\n  const temp = array.slice();\n\n  mergeSortHelper(sortedArray, 0, sortedArray.length - 1, temp, animations);\n\n  return animations;\n};\n\nconst mergeSortHelper = (\n  arr: number[],\n  low: number,\n  high: number,\n  temp: number[],\n  anim: (string | number)[][]\n) => {\n  if (low < high) {\n    const mid = Math.floor((low + high) / 2);\n    mergeSortHelper(temp, low, mid, arr, anim);\n    mergeSortHelper(temp, mid + 1, high, arr, anim);\n    merge(arr, low, mid, high, temp, anim);\n  }\n};\n\nconst merge = (\n  arr: number[],\n  low: number,\n  mid: number,\n  high: number,\n  temp: number[],\n  anim: (string | number)[][]\n) => {\n  let i = low;\n  let j = mid + 1;\n  let k = low;\n\n  anim.push(['key', mid]);\n\n  while (i <= mid && j <= high) {\n    anim.push(['compare', i, j]);\n\n    if (temp[i] < temp[j]) {\n      anim.push(['swap', k, temp[i]]);\n      arr[k] = temp[i];\n      i++;\n    } else {\n      anim.push(['swap', k, temp[j]]);\n      arr[k] = temp[j];\n      j++;\n    }\n\n    k++;\n  }\n\n  while (i <= mid) {\n    anim.push(['swap', k, temp[i]]);\n    arr[k] = temp[i];\n    i++;\n    k++;\n  }\n\n  while (j <= high) {\n    anim.push(['swap', k, temp[j]]);\n    arr[k] = temp[j];\n    j++;\n    k++;\n  }\n};\n\nexport default MergeSort;\n","// Helper Methods\nconst swapValues = (\n  dataSet: number[],\n  i: number,\n  j: number,\n  anim: (string | number)[][]\n) => {\n  anim.push(['swap', i, j]);\n  const temp = dataSet[i];\n  dataSet[i] = dataSet[j];\n  dataSet[j] = temp;\n};\n\nconst getRandomPivotIndex = (low: number, high: number) =>\n  Math.floor(Math.random() * (high - low + 1)) + low;\n\n// Code adapted from https://www.geeksforgeeks.org/quicksort-using-random-pivoting/\nconst QuickSort = (dataSet: number[], isLomuto: boolean) => {\n  const animations: (string | number)[][] = [];\n\n  if (dataSet.length <= 1) return animations;\n\n  const sortedData = dataSet.slice();\n\n  if (isLomuto) lomutoHelper(sortedData, 0, sortedData.length - 1, animations);\n  else hoareHelper(sortedData, 0, sortedData.length - 1, animations);\n\n  return animations;\n};\n\n// LOMUTO PARTITIONING\nconst lomutoHelper = (\n  dataSet: number[],\n  low: number,\n  high: number,\n  anim: (string | number)[][]\n) => {\n  if (low < high) {\n    const partitionIndex = lomutoPartition(dataSet, low, high, anim);\n\n    lomutoHelper(dataSet, low, partitionIndex - 1, anim);\n    lomutoHelper(dataSet, partitionIndex + 1, high, anim);\n  }\n};\n\nconst lomutoPartition = (\n  dataSet: number[],\n  low: number,\n  high: number,\n  anim: (string | number)[][]\n) => {\n  // Partitioning uses the last element (high index) of a section as the pivot\n  // Here, the last element is swapped with a random element\n  const randIndex = getRandomPivotIndex(low, high);\n  anim.push(['key', randIndex]);\n  swapValues(dataSet, randIndex, high, anim);\n  const pivot = dataSet[high];\n\n  let i = low - 1; // Index of small\n\n  for (let j = low; j < high; j++) {\n    // If current element is smaller/equal to pivot\n    if (dataSet[j] < pivot) {\n      // Swap them\n      i++;\n      anim.push(['compare', i, j]);\n      swapValues(dataSet, i, j, anim);\n    }\n  }\n\n  // Swap (i+1) with the pivot (which is placed at the high index)\n  anim.push(['compare', i + 1, high]);\n  swapValues(dataSet, i + 1, high, anim);\n\n  return i + 1;\n};\n\n// HOARE PARTITIONING\nconst hoareHelper = (\n  dataSet: number[],\n  low: number,\n  high: number,\n  anim: (string | number)[][]\n) => {\n  if (low < high) {\n    const partitionIndex = hoarePartition(dataSet, low, high, anim);\n    hoareHelper(dataSet, low, partitionIndex, anim);\n    hoareHelper(dataSet, partitionIndex + 1, high, anim);\n  }\n};\n\nconst hoarePartition = (\n  dataSet: number[],\n  low: number,\n  high: number,\n  anim: (string | number)[][]\n) => {\n  // Partitioning uses the first element (low index) of a section as the pivot\n  // Here, the last element is swapped with a random element\n  const randIndex = getRandomPivotIndex(low, high);\n  swapValues(dataSet, randIndex, low, anim);\n  const pivot = dataSet[low];\n  anim.push(['key', randIndex]);\n\n  // Hoare partitioning uses two pointers: i and j;\n  // That start from left and right and converge until\n  // They reach an unsorted value (relative to pivot)\n  //  - Left pointer moves until it finds the first value >= than pivot\n  //  - Right pointer moves until it finds the first value <= than pivot\n  let left = low;\n  let right = high;\n\n  while (true) {\n    // Moves left pointer\n    while (dataSet[left] < pivot) {\n      left++;\n      // anim.push(['compare', left, right]);\n    }\n\n    // Moves right pointer\n    while (dataSet[right] > pivot) {\n      right--;\n      // anim.push(['compare', left, right]);\n    }\n    anim.push(['compare', left, right]);\n\n    // Once left and right pointers cross eachother,\n    // The correct partition index is found\n    if (left >= right) return right;\n\n    // Swap the greater-than-pivot left element\n    // with the smaller-than-pivot right element\n    swapValues(dataSet, left, right, anim);\n\n    // This in turn separates the dataSet into two halves:\n    //  - Left half that is smaller than the pivot\n    //  - Right half that is greater than the pivot\n    // Loop repeats until pointers cross each other\n    // - At that point, another quick sort is called recursively\n    //   on the new halves\n  }\n};\n\nexport default QuickSort;\n","/* eslint-disable no-loop-func */\nimport React, { useState } from 'react';\n\nimport { calculateHeight } from '../DataSetDisplay';\n\nimport BubbleSort from './algorithms/BubbleSort';\nimport SelectionSort from './algorithms/SelectionSort';\nimport InsertionSort from './algorithms/InsertionSort';\nimport MergeSort from './algorithms/MergeSort';\nimport QuickSort from './algorithms/QuickSort';\n\nexport type AlgorithmType =\n  | 'bubble'\n  | 'selection'\n  | 'insertion'\n  | 'merge'\n  | 'quick_lom'\n  | 'quick_hor'\n  | undefined;\n\n// Main Colors\nexport const PRIMARY_COLOR = 'steelblue';\nconst COMPARISON_COLOR = 'yellow';\nconst KEY_COLOR = 'magenta';\nconst KEY_COLOR_TWO = 'crimson';\nconst SORTED_COLOR = 'seagreen';\n\nlet baseSpeed = 2;\n\nconst clamp = (num: number, min: number, max: number) =>\n  Math.min(Math.max(num, min), max);\n\nconst SortAnimator = (dataSet: number[]) => {\n  // States used to disable user input\n  const [animating, setAnimating] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n\n  const resetSorted = () => {\n    setIsSorted(false);\n  };\n\n  const sortData = (algorithm?: AlgorithmType) => {\n    setAnimating(true);\n    setIsSorted(true);\n\n    let animations: (string | number)[][] = [];\n\n    // Higher value -> Slower animation\n    // slowFactor of 1 is the base speed for selectionSort\n    // Increases for O(nlogn) algos as they are too quick to match speeds\n    let slowFactor = 1;\n\n    switch (algorithm) {\n      case 'bubble':\n        animations = BubbleSort(dataSet);\n        slowFactor = 0.5;\n        break;\n      case 'selection':\n        animations = SelectionSort(dataSet);\n        break;\n      case 'insertion':\n        animations = InsertionSort(dataSet);\n        break;\n      case 'merge':\n        animations = MergeSort(dataSet);\n        slowFactor = 5;\n        break;\n      case 'quick_lom':\n        animations = QuickSort(dataSet, true);\n        slowFactor = 5;\n        break;\n      case 'quick_hor':\n        animations = QuickSort(dataSet, false);\n        slowFactor = 5;\n        break;\n      default:\n        setIsSorted(false);\n        setAnimating(false);\n        console.error('No algorithm specified :/');\n        return;\n    }\n    animateSort(animations, slowFactor);\n  };\n\n  const setBaseSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    baseSpeed = 1 / parseFloat(e.target.value);\n  };\n\n  // Speed of animation (in ms)\n  // Base speed is the speed in which a dataSet of length 100\n  // goes at, and is then scaled to larger sizes\n  const ANIMATION_SPEED = () => {\n    const multiplier = dataSet.length / 100;\n    return baseSpeed / (multiplier * multiplier);\n  };\n\n  /*\n  SORTING ALGORITHM ANIMATIONS HERE\n\n  =========================================================\n\n  ALL SORTING ALGORITHMS RETURN AN 'ANIMATION' ARRAY:\n  An animation array is a 2D array that contains the steps\n  done in animating the sorting.\n\n  Each element is an array that containes the following values:\n    - type: string = The kind of operator it is\n        - 'key': Highlights a certain value (pivot, mid point, leading bar, etc.)\n        - 'compare': Highlights two bars which are being compared against each other\n        - 'swap': Swaps heights between bars\n            * for merge sort, only the first bar height is changed\n    - indexOne: number = The index of the first bar\n    - indexTwo: number = The index of the second bar\n        * indexTwo may be a duplicate for 'key' operations as only one bar is needed\n\n  Sorting then utilizes each element of the animation array to modify the\n  CSS styling of the bars to demonstrate the sorting.\n\n  Note: All animations use a bunch of setTimeouts\n    - Yes, I know it looks horrible, I just don't know any other alternative\n  */\n\n  // The final 'green' swipe of the data bars when things are done sorting\n  const finishSorting = (dataBars: HTMLCollectionOf<HTMLElement>) => {\n    const animSpeed = clamp(ANIMATION_SPEED(), 1, 50);\n\n    for (let i = 0; i < dataBars.length; i++) {\n      setTimeout(() => {\n        dataBars[i].style.backgroundColor = SORTED_COLOR;\n        if (i === dataBars.length - 1) {\n          setTimeout(() => {\n            setAnimating(false);\n            setIsSorted(true);\n          }, 1000);\n        }\n      }, i * animSpeed);\n    }\n  };\n\n  const animateSort = (\n    animations: (string | number)[][],\n    slowFactor: number\n  ) => {\n    const speed = ANIMATION_SPEED() * slowFactor;\n\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    let lastKeyIndex = 0;\n\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n\n      // Used to check if a bartwo actually exists\n      const hasValidBarTwo =\n        (barTwoIndex as number) < dataSet.length &&\n        Number.isInteger(barTwoIndex as number);\n      const barTwoStyles =\n        dataBars[\n          hasValidBarTwo ? (barTwoIndex as number) : (barOneIndex as number)\n        ].style;\n\n      switch (type) {\n        case 'key':\n          setTimeout(() => {\n            if (lastKeyIndex !== barOneIndex) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              barOneStyles.backgroundColor = KEY_COLOR_TWO;\n              lastKeyIndex = barOneIndex as number;\n            }\n            if (i === animations.length - 1) finishSorting(dataBars);\n          }, i * speed);\n          break;\n        case 'compare':\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = COMPARISON_COLOR;\n            if (barTwoIndex !== lastKeyIndex)\n              barTwoStyles.backgroundColor = KEY_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n            if (barTwoIndex !== lastKeyIndex)\n              barTwoStyles.backgroundColor = PRIMARY_COLOR;\n            if (i === animations.length - 1) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              finishSorting(dataBars);\n            }\n          }, (i + 1) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            if (hasValidBarTwo) {\n              const barOneHeight = barOneStyles.height;\n              barOneStyles.height = barTwoStyles.height;\n              barTwoStyles.height = barOneHeight;\n            } else {\n              const newHeight = calculateHeight(dataSet, barTwoIndex as number);\n              barOneStyles.height = `${newHeight}vh`;\n            }\n            if (i === animations.length - 1) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              finishSorting(dataBars);\n            }\n          }, i * speed);\n          break;\n        default:\n          console.error('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  return { sortData, setBaseSpeed, animating, isSorted, resetSorted };\n};\n\nexport default SortAnimator;\n","import React, { useState } from 'react';\nimport { PRIMARY_COLOR } from '../sort/SortAnimator';\nimport { calculateHeight } from '../DataSetDisplay';\n\n// Generates random data\nconst generateData = (size: number, height: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.random() * height + 1;\n  }\n  return data;\n};\n\n// The increment in which the data size grows\nconst INCREMENT = 25;\n\nexport const useDataState = (initialValue: number, height: number) => {\n  const [dataSet, setDataSet] = useState(generateData(initialValue, height));\n\n  let resetSorted: () => void;\n\n  const setResetSorted = (func: () => void) => {\n    resetSorted = func;\n  };\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseFloat(e.target.value);\n    const newSize = Math.ceil(input / INCREMENT) * INCREMENT;\n\n    setDataSet((oldData) => generateData(newSize, height));\n    resetStyling();\n  };\n\n  const regenerateNewData = () => {\n    setDataSet((oldData) => generateData(oldData.length, height));\n    resetStyling();\n  };\n\n  const undoSort = () => {\n    resetStyling();\n\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < dataBars.length; i++) {\n      dataBars[i].style.height = `${calculateHeight(dataSet, dataSet[i])}vh`;\n    }\n  };\n\n  const resetStyling = () => {\n    resetSorted();\n\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < dataBars.length; i++)\n      dataBars[i].style.backgroundColor = PRIMARY_COLOR;\n  };\n\n  return { handleChange, regenerateNewData, undoSort, setResetSorted, dataSet };\n};\n","import React, { useState } from 'react';\nimport { AlgorithmType } from './SortAnimator';\n\ninterface ButtonProps {\n  setSpeed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  sortData: (algorithm?: AlgorithmType) => void;\n  isSorted: boolean;\n  isDisabled: boolean;\n}\n\nconst SortDataInputs = (props: ButtonProps) => {\n  const [selectedAlgo, setSelectedAlgo] = useState('bubble');\n\n  const changeAlgo = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedAlgo(e.target.value);\n  };\n\n  return (\n    <div\n      className=\"input_section sort_section\"\n      style={{ display: props.isDisabled ? 'none' : 'inline' }}\n    >\n      <h3>Sort Speed:</h3>\n      <input\n        type=\"range\"\n        className=\"slider sort\"\n        min={0.1}\n        max={1.0}\n        step={0.00001}\n        defaultValue={0.5}\n        onInput={props.setSpeed}\n        onChange={props.setSpeed}\n        disabled={props.isDisabled}\n      ></input>\n      <div className=\"button_list sort_button\">\n        <select\n          name=\"algos\"\n          id=\"algo-drop\"\n          value={selectedAlgo}\n          onChange={changeAlgo}\n        >\n          <optgroup label=\"O(n²)\">\n            <option value=\"bubble\">Bubble Sort</option>\n            <option value=\"selection\">Selection Sort</option>\n            <option value=\"insertion\">Insertion Sort</option>\n          </optgroup>\n          <optgroup label=\"O(n·log(n))\">\n            <option value=\"merge\">Merge Sort</option>\n            <option value=\"quick_lom\">Quick Sort (Lomuto Partitioning)</option>\n            <option value=\"quick_hor\">Quick Sort (Hoare Partitioning)</option>\n          </optgroup>\n        </select>\n        <button\n          onClick={() => props.sortData(selectedAlgo as AlgorithmType)}\n          disabled={props.isDisabled || props.isSorted}\n          style={{\n            display: props.isDisabled || props.isSorted ? 'none' : 'inline'\n          }}\n        >\n          Sort Data\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SortDataInputs;\n","import DataSetInputs from './components/data-set/DataSetInputs';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/DataSetDisplay';\nimport SortDataInputs from './components/sort/SortDataInputs';\nimport SortAnimator from './components/sort/SortAnimator';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(100, 45);\n  const animState = SortAnimator(dataState.dataSet);\n\n  dataState.setResetSorted(animState.resetSorted);\n\n  return (\n    <div id=\"app\">\n      <h3 style={{ zIndex: 2 }}>\n        There are {dataState.dataSet.length} random elements in the data set\n      </h3>\n      <div id=\"display\">\n        <DataSetDisplay dataSet={dataState.dataSet} />\n      </div>\n      <div id=\"toolbar\" className={animState.animating ? 'hide' : 'show'}>\n        <div id=\"title\">\n          <h1>Sorting Algorithms</h1>\n          <h4>\n            <i>WARNING: Animation contains flashing lights</i>\n          </h4>\n          <h5>\n            © 2021 John Marcus Mabanta ·{' '}\n            <a\n              href=\"https://github.com/jmmabanta/sort-algo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Source Code\n            </a>\n          </h5>\n        </div>\n        <DataSetInputs\n          dataSize={dataState}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n        <SortDataInputs\n          sortData={animState.sortData}\n          setSpeed={animState.setBaseSpeed}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}