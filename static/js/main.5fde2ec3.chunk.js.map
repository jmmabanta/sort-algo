{"version":3,"sources":["components/data-set/DataSetInputs.tsx","components/DataSetDisplay.tsx","components/sort/algorithms/BubbleSort.ts","components/sort/algorithms/SelectionSort.ts","components/sort/algorithms/InsertionSort.ts","components/sort/algorithms/MergeSort.ts","components/sort/SortAnimator.ts","components/data-set/DataSetState.ts","components/sort/SortDataInputs.tsx","App.tsx","index.tsx"],"names":["DataSetInputs","props","className","style","display","isDisabled","type","min","max","defaultValue","onInput","dataSize","handleChange","onChange","disabled","onClick","regenerateNewData","id","undoSort","isSorted","calculateHeight","dataSet","value","Math","DataSetDisplay","width","length","map","index","height","margin","BubbleSort","animations","sortedData","slice","i","didSwap","j","push","temp","SelectionSort","minIndex","InsertionSort","key","mergeSortHelper","arr","low","high","anim","mid","floor","merge","k","MergeSort","array","sortedArray","PRIMARY_COLOR","COMPARISON_COLOR","KEY_COLOR","KEY_COLOR_TWO","baseSpeed","SortAnimator","useState","animating","setAnimating","setIsSorted","ANIMATION_SPEED","multiplier","finishSorting","dataBars","num","animSpeed","setTimeout","backgroundColor","animateBubbleSort","speed","document","getElementsByClassName","barOneIndex","barOneStyles","barTwoStyles","barOneHeight","console","error","animateSelectionSort","lastKeyIndex","barTwoIndex","animateInsertionSort","animateMergeSort","sortData","algorithm","setBaseSpeed","e","parseFloat","target","resetSorted","generateData","size","data","random","SortDataInputs","selectedAlgo","setSelectedAlgo","step","setSpeed","name","label","App","dataState","initialValue","setDataSet","resetStyling","input","newSize","ceil","oldData","setResetSorted","func","useDataState","animState","zIndex","href","rel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5fde2ec3.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    regenerateNewData: () => void;\n    undoSort: () => void;\n  };\n  isDisabled: boolean;\n  isSorted: boolean;\n}\n\nconst DataSetInputs = (props: DataProps) => {\n  return (\n    <div\n      className=\"input_section\"\n      style={{ display: props.isDisabled ? 'none' : 'inline' }}\n    >\n      <h3>Generate Data:</h3>\n      <input\n        type=\"range\"\n        className=\"slider data\"\n        min={25}\n        max={500}\n        defaultValue={100}\n        onInput={props.dataSize.handleChange}\n        onChange={props.dataSize.handleChange}\n        disabled={props.isDisabled}\n      />\n      <div className=\"button_list array_button\">\n        <button\n          onClick={props.dataSize.regenerateNewData}\n          disabled={props.isDisabled}\n        >\n          Make New Array\n        </button>\n        <button\n          id=\"undo_sort\"\n          onClick={props.dataSize.undoSort}\n          disabled={!props.isSorted || props.isDisabled}\n          style={{\n            display:\n              !props.isSorted || props.isDisabled ? 'none' : 'inline-block'\n          }}\n        >\n          Undo Sort\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetInputs;\n","interface DataSetProps {\n  dataSet: number[];\n}\n\nconst MAX_HEIGHT = 75;\n\n// Both calculateHeight and calculateWidth are used for CSS styling\n// Measured in vh and vw\nexport const calculateHeight = (dataSet: number[], value: number) => {\n  return (value * MAX_HEIGHT) / Math.max(...dataSet);\n};\n\nconst calculateWidth = (dataSize: number, maxWidth: number) => {\n  return maxWidth / (1.1 * (dataSize - 1));\n};\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  let width = calculateWidth(props.dataSet.length, 85);\n  return (\n    <div className=\"data_container\">\n      <div className=\"data_set\">\n        {props.dataSet.map((value, index) => {\n          return (\n            <div\n              className=\"data_bar\"\n              key={index}\n              style={{\n                height: `${calculateHeight(props.dataSet, value)}vh`,\n                width: `${width}vw`,\n                margin: `0 ${width / 10}vw`\n              }}\n            ></div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","const BubbleSort = (dataSet: number[]) => {\n  const animations: (string | number)[][] = [];\n\n  if (dataSet.length <= 1) return animations;\n\n  const sortedData = dataSet.slice();\n  const dataSize = sortedData.length;\n\n  for (let i = 0; i < dataSize - 1; i++) {\n    let didSwap = false;\n\n    for (let j = 0; j < dataSize - i - 1; j++) {\n      animations.push(['compare', j]);\n\n      if (sortedData[j] > sortedData[j + 1]) {\n        animations.push(['swap', j]);\n\n        const temp = sortedData[j];\n        sortedData[j] = sortedData[j + 1];\n        sortedData[j + 1] = temp;\n\n        didSwap = true;\n      }\n    }\n\n    if (!didSwap) return animations;\n  }\n\n  return animations;\n};\n\nexport default BubbleSort;\n","const SelectionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  const animations: (string | number)[][] = [];\n\n  if (sortedData.length <= 1) return animations;\n\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    animations.push(['key', i, 0]);\n\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n      animations.push(['compare', minIndex, j]);\n    }\n\n    animations.push(['swap', i, minIndex]);\n\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n\n  return animations;\n};\n\nexport default SelectionSort;\n","const InsertionSort = (dataSet: number[]) => {\n  const sortedData = dataSet.slice();\n  const animations: (string | number)[][] = [];\n\n  if (sortedData.length <= 1) return animations;\n\n  for (let i = 1; i < sortedData.length; i++) {\n    let key = sortedData[i];\n    let j = i - 1;\n\n    if (i < sortedData.length - 1) animations.push(['key', i]);\n    animations.push(['compare', j]);\n\n    while (j >= 0 && sortedData[j] > key) {\n      animations.push(['swap', j]);\n      sortedData[j + 1] = sortedData[j];\n      sortedData[j] = key;\n      j--;\n      if (sortedData[j] > key) animations.push(['compare', j]);\n    }\n  }\n\n  return animations;\n};\n\nexport default InsertionSort;\n","// Taken from\n// https://runestone.academy/runestone/books/published/apcsareview/searchsort/mergesort.html\n// * Based on the AP Computer Science A course\n// * Originally in Java, adapted for TypeScript\n// (also basically the same from Clement's visualizer/AlgoExpert.io)\n\nconst MergeSort = (array: number[]) => {\n  const animations: (string | number)[][] = [];\n\n  if (array.length <= 1) return animations;\n\n  const sortedArray = array.slice();\n  const temp = array.slice();\n\n  mergeSortHelper(sortedArray, 0, sortedArray.length - 1, temp, animations);\n\n  return animations;\n};\n\nconst mergeSortHelper = (\n  arr: number[],\n  low: number,\n  high: number,\n  temp: number[],\n  anim: (string | number)[][]\n) => {\n  if (low < high) {\n    const mid = Math.floor((low + high) / 2);\n    mergeSortHelper(temp, low, mid, arr, anim);\n    mergeSortHelper(temp, mid + 1, high, arr, anim);\n    merge(arr, low, mid, high, temp, anim);\n  }\n};\n\nconst merge = (\n  arr: number[],\n  low: number,\n  mid: number,\n  high: number,\n  temp: number[],\n  anim: (string | number)[][]\n) => {\n  let i = low;\n  let j = mid + 1;\n  let k = low;\n\n  while (i <= mid && j <= high) {\n    anim.push(['compare', i, j]);\n\n    if (temp[i] < temp[j]) {\n      anim.push(['swap', k, temp[i]]);\n      arr[k] = temp[i];\n      i++;\n    } else {\n      anim.push(['swap', k, temp[j]]);\n      arr[k] = temp[j];\n      j++;\n    }\n\n    k++;\n  }\n\n  while (i <= mid) {\n    anim.push(['swap', k, temp[i]]);\n    arr[k] = temp[i];\n    i++;\n    k++;\n  }\n\n  while (j <= high) {\n    anim.push(['swap', k, temp[j]]);\n    arr[k] = temp[j];\n    j++;\n    k++;\n  }\n};\n\nexport default MergeSort;\n","/* eslint-disable no-loop-func */\nimport React, { useState } from 'react';\n\nimport { calculateHeight } from '../DataSetDisplay';\n\nimport BubbleSort from './algorithms/BubbleSort';\nimport SelectionSort from './algorithms/SelectionSort';\nimport InsertionSort from './algorithms/InsertionSort';\nimport MergeSort from './algorithms/MergeSort';\n\nexport type AlgorithmType =\n  | 'bubble'\n  | 'selection'\n  | 'insertion'\n  | 'merge'\n  | undefined;\n\n// Main Colors\nexport const PRIMARY_COLOR = 'steelblue';\nconst COMPARISON_COLOR = 'yellow';\nconst KEY_COLOR = 'magenta';\nconst KEY_COLOR_TWO = 'crimson';\nconst SORTED_COLOR = 'seagreen';\n\nlet baseSpeed = 2;\n\nconst clamp = (num: number, min: number, max: number) =>\n  Math.min(Math.max(num, min), max);\n\nconst SortAnimator = (dataSet: number[]) => {\n  // States used to disable user input\n  const [animating, setAnimating] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n\n  const resetSorted = () => {\n    setIsSorted(false);\n  };\n\n  const sortData = (algorithm?: AlgorithmType) => {\n    switch (algorithm) {\n      case 'bubble':\n        animateBubbleSort();\n        break;\n      case 'selection':\n        animateSelectionSort();\n        break;\n      case 'insertion':\n        animateInsertionSort();\n        break;\n      case 'merge':\n        animateMergeSort();\n        break;\n      default:\n        setIsSorted(false);\n        console.error('No algorithm specified :/');\n        break;\n    }\n  };\n\n  const setBaseSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    baseSpeed = 1 / parseFloat(e.target.value);\n  };\n\n  // Speed of animation (in ms)\n  // Base speed is the speed in which a dataSet of length 100\n  // goes at, and is then scaled to larger sizes\n  const ANIMATION_SPEED = () => {\n    const multiplier = dataSet.length / 100;\n    return baseSpeed / (multiplier * multiplier);\n  };\n\n  /*\n  SORTING ALGORITHM ANIMATIONS HERE\n\n  =========================================================\n\n  ALL SORTING ALGORITHMS RETURN AN 'ANIMATION' ARRAY:\n  An animation array is a 2D array that contains the steps\n  done in animating the sorting.\n\n  Each element is array that containes the following values:\n    - type: string = The kind of operator it is\n      - For example, in selection sort: type can be 'compare' or 'swap'\n    - indexOne: number = The first bar\n    - indexTwo: number = The second bar\n\n  Sorting then utilizes each element of the animation array to modify the\n  CSS styling of the bars to demonstrate the sorting.\n\n  Note: All animations use a bunch of setTimeouts\n    - Yes, I know it looks horrible, I just don't know any other alternative\n  */\n\n  // The final 'green' swipe of the data bars when things are done sorting\n  const finishSorting = (dataBars: HTMLCollectionOf<HTMLElement>) => {\n    const animSpeed = clamp(ANIMATION_SPEED(), 1, 50);\n\n    for (let i = 0; i < dataBars.length; i++) {\n      setTimeout(() => {\n        dataBars[i].style.backgroundColor = SORTED_COLOR;\n        if (i === dataBars.length - 1) {\n          setTimeout(() => {\n            setAnimating(false);\n            setIsSorted(true);\n          }, 1000);\n        }\n      }, i * animSpeed);\n    }\n  };\n\n  const animateBubbleSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n\n    const speed = ANIMATION_SPEED();\n    const animations = BubbleSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles =\n        dataBars[\n          (barOneIndex as number) + 1 <= dataBars.length - 1\n            ? (barOneIndex as number) + 1\n            : 0\n        ].style;\n      switch (type) {\n        case 'compare':\n          setTimeout(() => {\n            barTwoStyles.backgroundColor = KEY_COLOR_TWO;\n            barOneStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n            if (i === animations.length - 1) finishSorting(dataBars);\n          }, (i + 2) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n          }, i * speed);\n          break;\n        default:\n          console.error('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateSelectionSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n\n    const speed = ANIMATION_SPEED();\n    const animations = SelectionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    let lastKeyIndex = 0;\n    dataBars[0].style.backgroundColor = KEY_COLOR_TWO;\n\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[barTwoIndex as number].style;\n      switch (type) {\n        case 'key':\n          setTimeout(() => {\n            if (lastKeyIndex !== (barOneIndex as number)) {\n              dataBars[lastKeyIndex as number].style.backgroundColor =\n                PRIMARY_COLOR;\n              barOneStyles.backgroundColor = KEY_COLOR_TWO;\n              lastKeyIndex = barOneIndex as number;\n            }\n            // The (i - 0.001) makes sure this executes\n            // before the other timeouts\n            // Yes, it is really jank :/\n          }, (i - 0.001) * speed);\n          break;\n        case 'compare':\n          // Sets to comparison color\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = KEY_COLOR;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * speed);\n          // Resets back to original color\n          setTimeout(() => {\n            if (barOneIndex !== lastKeyIndex)\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) {\n              barOneStyles.backgroundColor = PRIMARY_COLOR;\n              finishSorting(dataBars);\n            }\n          }, i * speed);\n          break;\n        default:\n          // This should in theory never print\n          console.error('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateInsertionSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n\n    const speed = ANIMATION_SPEED();\n    const animations = InsertionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[(barOneIndex as number) + 1].style;\n      switch (type) {\n        case 'key':\n          setTimeout(() => {\n            dataBars[(barOneIndex as number) - 1].style.backgroundColor =\n              PRIMARY_COLOR;\n            barOneStyles.backgroundColor = KEY_COLOR_TWO;\n          }, i * speed);\n          break;\n        case 'compare':\n          setTimeout(() => {\n            barOneStyles.backgroundColor = COMPARISON_COLOR;\n            if (barTwoStyles.backgroundColor !== KEY_COLOR_TWO)\n              barTwoStyles.backgroundColor = KEY_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR;\n            if (barTwoStyles.backgroundColor !== KEY_COLOR_TWO)\n              barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 2) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            if (i === animations.length - 1) finishSorting(dataBars);\n          }, i * speed);\n          break;\n        default:\n          console.error('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  const animateMergeSort = () => {\n    setAnimating(true);\n    setIsSorted(true);\n\n    const speed = ANIMATION_SPEED() * (dataSet.length / 50);\n    const animations = MergeSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      switch (type) {\n        case 'compare':\n          const barTwoStyles = dataBars[barTwoIndex as number].style;\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR_TWO;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1.5) * speed);\n          break;\n        case 'swap':\n          setTimeout(() => {\n            barOneStyles.backgroundColor = KEY_COLOR;\n            barOneStyles.height = `${calculateHeight(\n              dataSet,\n              barTwoIndex as number\n            )}vh`;\n            if (i === animations.length - 1) finishSorting(dataBars);\n          }, i * speed);\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1.5) * speed);\n          break;\n        default:\n          console.error('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  return { sortData, setBaseSpeed, animating, isSorted, resetSorted };\n};\n\nexport default SortAnimator;\n","import React, { useState } from 'react';\nimport { PRIMARY_COLOR } from '../sort/SortAnimator';\nimport { calculateHeight } from '../DataSetDisplay';\n\n// Generates random data\nconst generateData = (size: number, height: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.random() * height + 1;\n  }\n  return data;\n};\n\n// The increment in which the data size grows\nconst INCREMENT = 25;\n\nexport const useDataState = (initialValue: number, height: number) => {\n  const [dataSet, setDataSet] = useState(generateData(initialValue, height));\n\n  let resetSorted: () => void;\n\n  const setResetSorted = (func: () => void) => {\n    resetSorted = func;\n  };\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = parseFloat(e.target.value);\n    const newSize = Math.ceil(input / INCREMENT) * INCREMENT;\n\n    setDataSet((oldData) => generateData(newSize, height));\n    resetStyling();\n  };\n\n  const regenerateNewData = () => {\n    setDataSet((oldData) => generateData(oldData.length, height));\n    resetStyling();\n  };\n\n  const undoSort = () => {\n    resetStyling();\n\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < dataBars.length; i++) {\n      dataBars[i].style.height = `${calculateHeight(dataSet, dataSet[i])}vh`;\n    }\n  };\n\n  const resetStyling = () => {\n    resetSorted();\n\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n\n    for (let i = 0; i < dataBars.length; i++)\n      dataBars[i].style.backgroundColor = PRIMARY_COLOR;\n  };\n\n  return { handleChange, regenerateNewData, undoSort, setResetSorted, dataSet };\n};\n","import React, { useState } from 'react';\nimport { AlgorithmType } from './SortAnimator';\n\ninterface ButtonProps {\n  setSpeed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  sortData: (algorithm?: AlgorithmType) => void;\n  isSorted: boolean;\n  isDisabled: boolean;\n}\n\nconst SortDataInputs = (props: ButtonProps) => {\n  const [selectedAlgo, setSelectedAlgo] = useState('bubble');\n\n  const changeAlgo = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedAlgo(e.target.value);\n  };\n\n  return (\n    <div\n      className=\"input_section sort_section\"\n      style={{ display: props.isDisabled ? 'none' : 'inline' }}\n    >\n      <h3>Sort Speed:</h3>\n      <input\n        type=\"range\"\n        className=\"slider sort\"\n        min={0.1}\n        max={1.0}\n        step={0.00001}\n        defaultValue={0.5}\n        onInput={props.setSpeed}\n        onChange={props.setSpeed}\n        disabled={props.isDisabled}\n      ></input>\n      <div className=\"button_list sort_button\">\n        <select\n          name=\"algos\"\n          id=\"algo-drop\"\n          value={selectedAlgo}\n          onChange={changeAlgo}\n        >\n          <optgroup label=\"O(n²)\">\n            <option value=\"bubble\">Bubble Sort</option>\n            <option value=\"selection\">Selection Sort</option>\n            <option value=\"insertion\">Insertion Sort</option>\n          </optgroup>\n          <optgroup label=\"O(n·log(n))\">\n            <option value=\"merge\">Merge Sort</option>\n          </optgroup>\n        </select>\n        <button\n          onClick={() => props.sortData(selectedAlgo as AlgorithmType)}\n          disabled={props.isDisabled || props.isSorted}\n          style={{\n            display: props.isDisabled || props.isSorted ? 'none' : 'inline'\n          }}\n        >\n          Sort Data\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SortDataInputs;\n","import DataSetInputs from './components/data-set/DataSetInputs';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/DataSetDisplay';\nimport SortDataInputs from './components/sort/SortDataInputs';\nimport SortAnimator from './components/sort/SortAnimator';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(100, 45);\n  const animState = SortAnimator(dataState.dataSet);\n\n  dataState.setResetSorted(animState.resetSorted);\n\n  return (\n    <div id=\"app\">\n      <h3 style={{ zIndex: 2 }}>\n        There are {dataState.dataSet.length} random elements in the data set\n      </h3>\n      <div id=\"display\">\n        <DataSetDisplay dataSet={dataState.dataSet} />\n      </div>\n      <div id=\"toolbar\" className={animState.animating ? 'hide' : 'show'}>\n        <div id=\"title\">\n          <h1>Sorting Algorithms</h1>\n          <h4>\n            <i>WARNING: Animation contains flashing lights</i>\n          </h4>\n          <h5>\n            © 2021 John Marcus Mabanta ·{' '}\n            <a\n              href=\"https://github.com/jmmabanta/sort-algo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Source Code\n            </a>\n          </h5>\n        </div>\n        <DataSetInputs\n          dataSize={dataState}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n        <SortDataInputs\n          sortData={animState.sortData}\n          setSpeed={animState.setBaseSpeed}\n          isDisabled={animState.animating}\n          isSorted={animState.isSorted}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}