{"version":3,"sources":["components/data-set/DataSetSize.tsx","components/data-set/DataSet.tsx","App.tsx","components/data-set/SetDataSize.tsx","index.tsx"],"names":["DataSetSize","props","className","name","value","dataSize","onChange","handleChange","onClick","subtract","add","DataSet","display","size","data","i","Math","floor","random","generate_data","map","num","App","initialValue","useState","setValue","e","target","test","parseInt","useDataSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA4BeA,EAjBK,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,gDACA,uBACEC,KAAK,WACLC,MAAOH,EAAMI,SAASD,MACtBE,SAAUL,EAAMI,SAASE,eAE3B,sBAAKL,UAAU,yBAAf,UACE,wBAAQM,QAASP,EAAMI,SAASI,SAAhC,eACA,wBAAQD,QAASP,EAAMI,SAASK,IAAhC,sB,OCMOC,EAhBC,SAACV,GACf,IACMW,EACJ,IAXkB,SAACC,GAErB,IADA,IAAIC,EAAiB,CAACD,GACbE,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAKC,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAE9C,OAAOJ,EAIWK,CAAclB,EAAMY,MAG1BO,KAAI,SAACC,GACb,MAAO,IAAMA,KAEf,KACF,OACE,gCACE,uCACA,6BAAKT,QCEIU,EAlBH,WAGV,IAAMjB,ECEmB,SAACkB,GAAwC,IAAD,EACvCC,mBAASD,GAD8B,mBAC1DnB,EAD0D,KACnDqB,EADmD,KAiBjE,MAAO,CAAErB,QAAOM,IAbJ,kBAAMe,GAAS,SAACC,GAAD,OAAOA,EAAI,MAajBjB,SAZJ,kBAAMgB,GAAS,SAACC,GAAD,OAAQA,EAAI,EAAIA,EAAI,EAAI,MAYzBnB,aATV,SAACmB,IAGC,KAAnBA,EAAEC,OAAOvB,OAFQ,aAGLwB,KAAKF,EAAEC,OAAOvB,QAAUyB,SAASH,EAAEC,OAAOvB,QAAU,IAEhEqB,EAASI,SAASH,EAAEC,OAAOvB,QAAU,KDhBxB0B,CAAY,GAC7B,OACE,sBAAK5B,UAAU,MAAf,UACE,oDACA,6BACE,4EAIF,cAAC,EAAD,CAAaG,SAAUA,IACvB,cAAC,EAAD,CAASQ,KAAMR,EAASD,YEf9B2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e73fed66.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface DataProps {\n  dataSize: {\n    value: number;\n    add: () => void;\n    subtract: () => void;\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  };\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div className=\"data-size-form\">\n      <h2>Data Set Size:</h2>\n      <input\n        name=\"dataSize\"\n        value={props.dataSize.value}\n        onChange={props.dataSize.handleChange}\n      ></input>\n      <div className=\"data-size-form-buttons\">\n        <button onClick={props.dataSize.subtract}>-</button>\n        <button onClick={props.dataSize.add}>+</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","interface DataSetProps {\n  size: number;\n}\n\nconst generate_data = (size: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.floor(Math.random() * 200) - 100;\n  }\n  return data;\n};\n\nconst DataSet = (props: DataSetProps) => {\n  const testArray = generate_data(props.size);\n  const display =\n    \"[\" +\n    testArray.map((num) => {\n      return \" \" + num;\n    }) +\n    \" ]\";\n  return (\n    <div>\n      <h2>Data:</h2>\n      <h3>{display}</h3>\n    </div>\n  );\n};\n\nexport default DataSet;\n","import \"./App.css\";\n\nimport DataSetSize from \"./components/data-set/DataSetSize\";\nimport { useDataSize } from \"./components/data-set/SetDataSize\";\n\nimport DataSet from \"./components/data-set/DataSet\";\n\nconst App = () => {\n  // Manages the size of the data set to be sorted\n  // Passed as prop to DataSetSize component\n  const dataSize = useDataSize(6);\n  return (\n    <div className=\"App\">\n      <h1>Sorting Algorithms</h1>\n      <h3>\n        <i>*still a work in progress don't flame :(*</i>\n      </h3>\n      {/*This is the form that manages the size of the data array that is to be sorted\n      (minimum size = 2) */}\n      <DataSetSize dataSize={dataSize} />\n      <DataSet size={dataSize.value} />\n    </div>\n  );\n};\n\nexport default App;\n","/* The state manager for the data set size */\n\nimport React, { useState } from \"react\";\n\n// Defines types for the hook\ninterface DataSizeType {\n  value: number;\n  add: () => void;\n  subtract: () => void;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const useDataSize = (initialValue: number): DataSizeType => {\n  const [value, setValue] = useState(initialValue);\n\n  // Used for the + and - buttons\n  const add = () => setValue((e) => e + 1);\n  const subtract = () => setValue((e) => (e > 1 ? e - 1 : 1));\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const regexCheck = /^[0-9\\b]+$/; // Checks if input is a valid number\n    if (\n      e.target.value === \"\" ||\n      (regexCheck.test(e.target.value) && parseInt(e.target.value) >= 1)\n    )\n      setValue(parseInt(e.target.value) || 1);\n  };\n\n  return { value, add, subtract, handleChange };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}