{"version":3,"sources":["components/data-set/DataSetSize.tsx","components/sort/algorithms/SelectionSort.ts","components/sort/SortAnimator.tsx","components/data-set/DataSetState.tsx","components/DataSetDisplay.tsx","components/sort/SortDataButtons.tsx","App.tsx","index.tsx"],"names":["DataSetSize","props","id","type","name","min","max","step","defaultValue","onInput","dataSize","handleChange","onChange","onClick","regenerateNewData","setSpeed","selectionSort","dataSet","sortedData","slice","animations","length","i","minIndex","j","push","temp","PRIMARY_COLOR","SORTED_COLOR","baseSpeed","SortAnimator","useState","animating","setAnimating","useEffect","userInputs","document","getElementById","style","visibility","ANIMATION_SPEED","multiplier","animateSelectionSort","dataBars","getElementsByClassName","barOneIndex","barTwoIndex","barOneStyles","barTwoStyles","setTimeout","backgroundColor","barOneHeight","height","console","log","sortData","algorithm","setIsSorted","setBaseSpeed","e","parseFloat","target","value","generateData","size","data","Math","random","isSorted","calculateHeight","maxHeight","DataSetDisplay","width","className","map","index","margin","SortDataButtons","App","dataState","initialValue","setDataSet","resetStyling","sortButtons","newSize","parseInt","oldData","useDataState","animState","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.747644b5.chunk.js","sourcesContent":["import React from 'react';\n\ninterface DataProps {\n  dataSize: {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    regenerateNewData: () => void;\n  };\n  setSpeed: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst DataSetSize = (props: DataProps) => {\n  return (\n    <div id=\"data_form\">\n      <div id=\"set_size\">\n        <b>Generate Data: </b>\n        <input\n          type=\"range\"\n          name=\"data_size\"\n          min={100}\n          max={500}\n          step={10}\n          defaultValue={100}\n          onInput={props.dataSize.handleChange}\n          onChange={props.dataSize.handleChange}\n        />\n        <button onClick={props.dataSize.regenerateNewData}>üîÑÔ∏è</button>\n      </div>\n      <div id=\"set_speed\">\n        <b>Sort Speed: </b>\n        <input\n          type=\"range\"\n          min={0.2}\n          max={4.0}\n          step={0.1}\n          defaultValue={2}\n          onInput={props.setSpeed}\n          onChange={props.setSpeed}\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSetSize;\n","const selectionSort = (dataSet: number[]) => {\n  let sortedData = dataSet.slice();\n  let animations: (string | number)[][] = [];\n  if (sortedData.length === 1) return animations;\n  for (let i = 0; i < sortedData.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < sortedData.length; j++) {\n      if (sortedData[j] < sortedData[minIndex]) minIndex = j;\n      animations.push(['compare', minIndex, j]);\n    }\n    animations.push(['swap', i, minIndex]);\n    let temp = sortedData[i];\n    sortedData[i] = sortedData[minIndex];\n    sortedData[minIndex] = temp;\n  }\n  return animations;\n};\n\nexport default selectionSort;\n","import React, { useState, useEffect } from 'react';\nimport selectionSort from './algorithms/SelectionSort';\nimport { setIsSorted } from '../data-set/DataSetState';\n\nexport type AlgorithmType = 'selection' | undefined;\n\n// Main Colors\nexport const PRIMARY_COLOR = 'cornflowerblue';\nconst COMPARISON_COLOR = 'red';\nconst SORTED_COLOR = 'palegreen';\n\nlet baseSpeed = 0.5;\n\nconst SortAnimator = (dataSet: number[]) => {\n  /*\n  State essentially toggles visibility of slider\n  A band-aid fix that stops user from changing data set\n  While its being sorted\n  */\n  const [animating, setAnimating] = useState(false);\n\n  /*\n  Hides all forms of user interaction with the data set during animation:\n    - Slider that controls size\n    - Buttons that sort the set\n  Currently unused, implement later when selection sort animation works.\n  */\n  useEffect(() => {\n    const userInputs = document.getElementById('data_form') as HTMLElement;\n    if (animating) {\n      userInputs.style.visibility = 'hidden';\n    } else {\n      userInputs.style.visibility = 'visible';\n    }\n  }, [animating]);\n\n  const sortData = (algorithm?: AlgorithmType) => {\n    setIsSorted(true);\n    const sortButtons = document.getElementById('sort_buttons') as HTMLElement;\n    sortButtons.style.visibility = 'hidden';\n    switch (algorithm) {\n      case 'selection':\n        animateSelectionSort();\n        break;\n      default:\n        setIsSorted(false);\n        console.log('No algorithm specified :/');\n        break;\n    }\n  };\n\n  const setBaseSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    baseSpeed = 1 / parseFloat(e.target.value);\n  };\n\n  // Speed of animation (in ms)\n  // Base speed is the speed in which a dataSet of length 100\n  // goes at, and is then scaled to larger sizes\n  const ANIMATION_SPEED = () => {\n    const multiplier = dataSet.length / 100;\n    return baseSpeed / (multiplier * multiplier);\n  };\n\n  /*\n  SORTING ALGORITHM ANIMATIONS HERE\n\n  =========================================================\n\n  ALL SORTING ALGORITHMS RETURN AN 'ANIMATION' ARRAY:\n  An animation array is a 2D array that contains the steps\n  done in animating the sorting.\n\n  Each element is array that containes the following values:\n    - type: string = The kind of operator it is\n      - For example, in selection sort: type can be 'compare' or 'swap'\n    - indexOne: number = The first bar\n    - indexTwo: number = The second bar\n\n  Sorting then utilizes each element of the animation array to modify the\n  CSS styling of the bars to demonstrate the sorting.\n  */\n\n  const animateSelectionSort = () => {\n    setAnimating(true);\n    const animations = selectionSort(dataSet);\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    for (let i = 0; i < animations.length; i++) {\n      const [type, barOneIndex, barTwoIndex] = animations[i];\n      const barOneStyles = dataBars[barOneIndex as number].style;\n      const barTwoStyles = dataBars[barTwoIndex as number].style;\n      switch (type) {\n        case 'compare':\n          // Sets to comparison color\n          setTimeout(() => {\n            barOneStyles.backgroundColor = COMPARISON_COLOR;\n            barTwoStyles.backgroundColor = COMPARISON_COLOR;\n          }, i * ANIMATION_SPEED());\n          // Resets back to original color\n          setTimeout(() => {\n            barOneStyles.backgroundColor = PRIMARY_COLOR;\n            barTwoStyles.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * ANIMATION_SPEED());\n          break;\n        case 'swap':\n          setTimeout(() => {\n            const barOneHeight = barOneStyles.height;\n            barOneStyles.height = barTwoStyles.height;\n            barTwoStyles.height = barOneHeight;\n            barOneStyles.backgroundColor = SORTED_COLOR;\n            if (i === animations.length - 1) {\n              dataBars[dataBars.length - 1].style.backgroundColor =\n                SORTED_COLOR;\n              setAnimating(false);\n            }\n          }, i * ANIMATION_SPEED());\n          break;\n        default:\n          // This should in theory never print\n          console.log('Unknown operator??????');\n          break;\n      }\n    }\n  };\n\n  return { sortData, setBaseSpeed };\n};\n\nexport default SortAnimator;\n","import React, { useState } from 'react';\nimport { PRIMARY_COLOR } from '../sort/SortAnimator';\n\n// Generates random data\nconst generateData = (size: number, height: number): number[] => {\n  let data: number[] = [size];\n  for (let i = 0; i < size; i++) {\n    data[i] = Math.random() * height + 1;\n  }\n  return data;\n};\n\nlet isSorted = false;\n\nexport const setIsSorted = (value: boolean) => {\n  isSorted = value;\n};\n\nexport const getIsSorted = () => isSorted;\n\nexport const useDataState = (initialValue: number, height: number) => {\n  const [dataSet, setDataSet] = useState(generateData(initialValue, height));\n\n  // Used for direct user input in the field\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newSize = parseInt(e.target.value);\n    setDataSet((oldData) => generateData(newSize, height));\n    resetStyling();\n  };\n\n  const regenerateNewData = () => {\n    setDataSet((oldData) => generateData(oldData.length, height));\n    resetStyling();\n  };\n\n  const resetStyling = () => {\n    if (!isSorted) return;\n    const dataBars = document.getElementsByClassName(\n      'data_bar'\n    ) as HTMLCollectionOf<HTMLElement>;\n    const sortButtons = document.getElementById('sort_buttons') as HTMLElement;\n    for (let i = 0; i < dataBars.length; i++)\n      dataBars[i].style.backgroundColor = PRIMARY_COLOR;\n    sortButtons.style.visibility = 'visible';\n    isSorted = false;\n  };\n\n  return { handleChange, regenerateNewData, dataSet };\n};\n","interface DataSetProps {\n  dataSet: number[];\n}\n\n// Both calculateHeight and calculateWidth are used for CSS styling\n// Measured in vh and vw\nconst calculateHeight = (\n  dataSet: number[],\n  value: number,\n  maxHeight: number\n) => {\n  return (value * maxHeight) / Math.max(...dataSet);\n};\n\nconst calculateWidth = (dataSize: number, maxWidth: number) => {\n  return maxWidth / (2 * (dataSize - 1));\n};\n\nconst DataSetDisplay = (props: DataSetProps) => {\n  let width = calculateWidth(props.dataSet.length, 60);\n  return (\n    <div className=\"data_container\">\n      <div className=\"data_set\">\n        {props.dataSet.map((value, index) => {\n          return (\n            <div\n              className=\"data_bar\"\n              key={index}\n              style={{\n                height: `${calculateHeight(props.dataSet, value, 45)}vh`,\n                width: `${width}vw`,\n                margin: `0 ${width}vw`\n              }}\n            >\n              {/* value */}\n            </div>\n          );\n        })}\n      </div>\n      <p>There are {props.dataSet.length} random elements in the data set.</p>\n    </div>\n  );\n};\n\nexport default DataSetDisplay;\n","import { AlgorithmType } from './SortAnimator';\n\ninterface ButtonProps {\n  sortData: (algorithm?: AlgorithmType) => void;\n}\n\nconst SortDataButtons = (props: ButtonProps) => {\n  return (\n    <div id=\"sort_buttons\">\n      <button\n        onClick={() => {\n          props.sortData('selection');\n        }}\n      >\n        Selection Sort Test\n      </button>\n    </div>\n  );\n};\n\nexport default SortDataButtons;\n","import DataSetSize from './components/data-set/DataSetSize';\nimport { useDataState } from './components/data-set/DataSetState';\nimport DataSetDisplay from './components/DataSetDisplay';\nimport SortDataButtons from './components/sort/SortDataButtons';\nimport SortAnimator from './components/sort/SortAnimator';\n\nconst App = () => {\n  // Manages the data set used for sorting\n  const dataState = useDataState(100, 45);\n\n  const animState = SortAnimator(dataState.dataSet);\n\n  return (\n    <div className=\"App\">\n      <h1>Sorting Algorithms</h1>\n      <h3>\n        <i>*still a work in progress don't flame :(*</i>\n      </h3>\n      <DataSetDisplay dataSet={dataState.dataSet} />\n      <DataSetSize dataSize={dataState} setSpeed={animState.setBaseSpeed} />\n      <SortDataButtons sortData={animState.sortData} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}